/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without ven the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	FileWriter.plaid
**/
package plaidio.streams.outputs;

import com.akefirad.plaid.lang.statecheckers.*;

//------------------------------------------------------------------------------
/**
	CID:	TS-??
	DESC:	A file output stream is an output stream for writing data to a File.
			This typestate should be used in composition with an OutputStream
			which provides low level functionality for output streams.
**/
state FileWriter
{
	val /*java.io.FileWriter*/ j_Stream;

    override method void write(immutable Int32 integer) /*[immutable FileWriter >> immutable FileWriter this]*/
    {
    	p_write_FileWriter(integer);
    }

    override method void writeAll(immutable CharArray chars) /*[immutable FileWriter >> immutable FileWriter this]*/
    {
    	p_writeAll_FileWriter(chars);
    }

    override method void writeSome(immutable CharArray chars, unique InBoundInteger indexer) /*[immutable FileWriter >> immutable FileWriter this]*/
    {
    	p_writeSome_FileWriter(chars, indexer);
    }

    method void p_write_FileWriter(immutable Int32 integer) /*[immutable FileWriter >> immutable FileWriter this]*/
    {
    	p_write_Writer(integer);
    }

    method void p_writeAll_FileWriter(immutable CharArray chars) /*[immutable FileWriter >> immutable FileWriter this]*/
    {
    	p_writeAll_Writer(chars);
    }

    method void p_writeSome_FileWriter(immutable CharArray chars, unique InBoundInteger indexer) /*[immutable FileWriter >> immutable FileWriter this]*/
    {
    	p_writeSome_Writer(chars, indexer);
    }
}
