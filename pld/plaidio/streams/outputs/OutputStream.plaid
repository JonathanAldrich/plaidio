/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without ven the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	OutputStream.plaid
**/
package plaidio.streams.outputs;

import plaidio.streams.auxiliaries.CloseableStream;
import plaidio.streams.auxiliaries.FlushableStream;

import com.akefirad.plaid.lang.statecheckers.*;

//------------------------------------------------------------------------------
/**
	CID:	TS-??
	DESC:	This abstract class is the superclass of all classes representing an output stream of bytes.
			An output stream accepts output bytes and sends them to some sink.
			Applications that need to define a subclass of OutputStream must always
			provide at least a method that writes one byte of output.
**/
state OutputStream = CloseableStream with FlushableStream with
{
	method getStream() /*[immutable OutputStream >> immutable OutputStream this]*/;

	method void write(immutable Int32 integer) /*[immutable OutputStream >> immutable OutputStream this]*/
    {
    	p_write_OutputStream(integer);
    }

    method void writeAll(immutable Array bytes) /*[immutable OutputStream >> immutable OutputStream this]*/
    {
    	p_writeAll_OutputStream(bytes);
    }

    method void writeSome(immutable Array bytes, unique InBoundInteger indexer) /*[immutable OutputStream >> immutable OutputStream this]*/
    {
    	p_writeSome_OutputStream(bytes, indexer);
    }

    method void p_write_OutputStream(immutable Int32 integer) /*[immutable OutputStream >> immutable OutputStream this]*/
    {
    	j_Stream.write(integer);
    }

    method void p_writeAll_OutputStream(immutable Array bytes) /*[immutable OutputStream >> immutable OutputStream this]*/
    {
    	j_Stream.write(bytes.getBytes());
    }

    method void p_writeSome_OutputStream(immutable Array bytes, unique InBoundInteger indexer) /*[immutable OutputStream >> immutable OutputStream this]*/
    {
    	j_Stream.write(bytes.getBytes(), indexer.get(), indexer.getRemainingSteps());
    }
}
