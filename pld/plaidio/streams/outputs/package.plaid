/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without ven the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-??
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.streams.outputs is basic statespace for SR-?? features
	FILE:	package.plaid
**/
package plaidio.streams.outputs;

import com.akefirad.plaid.lang.makeByteArray;
import com.akefirad.plaid.lang.collections.ByteArray;

import plaidio.statecheckers.*;
import com.akefirad.plaid.lang.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

typedef state PlaidFileOutputStream = OutputStream with FileOutputStream

/*------------------------------------------------------------------------------
/**
	CID:	??
	DESC:	The constructor for FileOutputStream
**/
method unique PlaidFileOutputStream makePlaidFileOutputStream(immutable String path, immutable Boolean appendable)
{
	val unique PlaidFileOutputStream pfos = new PlaidFileOutputStream { val j_Stream = java.io.FileOutputStream.new(java.io.File.new(path), appendable); };
	ifElse (appendable)
	{
		pfos.p_makeAppendableFileOutputStream();
	}
	/*else*/
	{
		pfos.p_makeOverwrittenFileOutputStream();
	};
	/*return*/ pfos;
}

/*------------------------------------------------------------------------------
/**
	CID:	TC-SS-??
	DESC:	Test cases of plaidio.streams.outputs package's features
**/
method void test_outputs(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.streams.outputs package's features");

	testbed.makeTestCase("create a file output stream and close it", fn(tc) => {
		val unique PlaidFileOutputStream o = makePlaidFileOutputStream("c:\\temp\\test1.bin", false);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		tc.assert(fn() => { debugIsOutputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsCloseableStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFileOutputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsClosedStream(o, verbose) == false; }, verbose);
		tc.debug("The stream is going to be closed...", verbose);
		o.close();
		tc.assert(fn() => { debugIsOutputStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsCloseableStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsFileOutputStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsClosedStream(o, verbose); }, verbose);
	});

	testbed.makeTestCase("create an appendable file output stream", fn(tc) => {
		val unique PlaidFileOutputStream o = makePlaidFileOutputStream("c:\\temp\\test1.bin", true);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		tc.assert(fn() => { debugIsOutputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsCloseableStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFileOutputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsAppendableFileOutputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsOverwrittenFileOutputStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsClosedStream(o, verbose) == false; }, verbose);
		o.close();
	});

	testbed.makeTestCase("create an overwritable file output stream", fn(tc) => {
		val unique PlaidFileOutputStream o = makePlaidFileOutputStream("c:\\temp\\test1.bin", false);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		tc.assert(fn() => { debugIsOutputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsCloseableStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFileOutputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsAppendableFileOutputStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsOverwrittenFileOutputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsClosedStream(o, verbose) == false; }, verbose);
		o.close();
	});
	
	testbed.makeTestCase("create a file output stream and write an integer", fn(tc) => {
		val unique PlaidFileOutputStream o = makePlaidFileOutputStream("c:\\temp\\test2.bin", false);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		tc.debug("The stream is going to write 'A':", verbose);
		o.write(65);
		o.close();
	});	

	testbed.makeTestCase("create a file output stream and write an array of bytes (5)", fn(tc) => {
		val size = 5;
		val unique PlaidFileOutputStream o = makePlaidFileOutputStream("c:\\temp\\test3.bin", false);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		val unique ByteArray a = makeByteArray(size);
		a.setBytes(com.akefirad.plaid.JavaHelper.generateRandomBytes(size, 33, 126));
		var unique InBoundInteger i = a.getIndexer();
		tc.debug("The randomly generated array contains:", verbose);
		while
		{
			isInBoundInteger(i);
		}
		/*do*/
		{
			tc.debug("'" + a.get(i) + "'", verbose);
			i.increaseOne();
		};
		o.writeAll(a);
		o.close();
	});

	testbed.makeTestCase("create a file output stream and write an array of bytes (5) (partially from 2, 2 items):", fn(tc) => {
		val size = 5;
		val unique PlaidFileOutputStream o = makePlaidFileOutputStream("c:\\temp\\test4.bin", false);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		val unique ByteArray a = makeByteArray(size);
		a.setBytes(com.akefirad.plaid.JavaHelper.generateRandomBytes(size, 33, 126));
		var unique InBoundInteger i = a.getIndexer();
		tc.debug("The randomly generated array contains:", verbose);
		while
		{
			isInBoundInteger(i);
		}
		/*do*/
		{
			tc.debug("'" + a.get(i) + "'", verbose);
			i.increaseOne();
		};
		i = a.getIndexer();
		i.set(2);
		i.setRemainingSteps(2);
		o.writeSome(a, i);
		o.close();
	});

	testbed.runTestCases(verbose);
}
