/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without ven the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-??
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.streams.outputs is basic statespace for SR-?? features
	FILE:	package.plaid
**/
package plaidio.streams.filters;

import com.akefirad.plaid.lang.makeByteArray;
import com.akefirad.plaid.lang.collections.ByteArray;

import plaidio.streams.outputs.OutputStream;
import plaidio.streams.outputs.FileOutputStream;
import plaidio.streams.outputs.PlaidFileOutputStream;
import plaidio.streams.outputs.makePlaidFileOutputStream;
import plaidio.streams.inputs.InputStream;
import plaidio.streams.inputs.FileInputStream;
import plaidio.streams.inputs.PlaidFileInputStream;
import plaidio.streams.inputs.makePlaidFileInputStream;
import plaidio.streams.auxiliaries.MarkableStream;

import plaidio.statecheckers.*;
import com.akefirad.plaid.lang.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

typedef state PlaidAlphabetFilePrinter = OutputStream with FileOutputStream
	with AlphabetFilePrinter
	{
		method void p_write_LowLevel_AlphabetFilePrinter(immutable Int32 integer) /*[immutable AlphabetFilePrinter >> immutable AlphabetFilePrinter this]*/
		{
			p_write_FileOutputStream(integer);
		}	
	}

typedef state PlaidInvertCaseAlphabetFilePrinter = OutputStream with FileOutputStream
	with InvertCaseAlphabetFilePrinter
	{
		method void p_write_LowLevel_InvertCaseAlphabetFilePrinter(immutable Int32 integer) /*[immutable InvertCaseAlphabetFilePrinter >> immutable InvertCaseAlphabetFilePrinter this]*/
		{
			p_write_FileOutputStream(integer);
		}	
	}
	with AlphabetFilePrinter
	{
		method void p_write_LowLevel_AlphabetFilePrinter(immutable Int32 integer) /*[immutable AlphabetFilePrinter >> immutable AlphabetFilePrinter this]*/
		{
			p_write_InvertCaseAlphabetFilePrinter(integer);
		}	
	}

typedef state PlaidBufferedOutputStream = OutputStream with FileOutputStream with BufferedOutputStream
typedef state PlaidBufferedInputStream = InputStream with FileInputStream with BufferedInputStream with MarkableStream

/*------------------------------------------------------------------------------
/**
	CID:	??
	DESC:	The constructor for AlphabetFilePrinter
**/
method unique PlaidAlphabetFilePrinter makePlaidAlphabetFilePrinter(immutable String path, immutable Boolean appendable)
{
	val unique PlaidAlphabetFilePrinter pafp = new PlaidAlphabetFilePrinter { val j_Stream = java.io.FileOutputStream.new(java.io.File.new(path), appendable); };
	ifElse (appendable)
	{
		pafp.p_makeAppendableFileOutputStream();
	}
	/*else*/
	{
		pafp.p_makeOverwrittenFileOutputStream();
	};
	/*return*/ pafp;
}

/*------------------------------------------------------------------------------
/**
	CID:	??
	DESC:	The constructor for InvertCaseAlphabetFilePrinter
**/
method unique PlaidInvertCaseAlphabetFilePrinter makePlaidInvertCaseAlphabetFilePrinter(immutable String path, immutable Boolean appendable)
{
	val unique PlaidInvertCaseAlphabetFilePrinter pafp = new PlaidInvertCaseAlphabetFilePrinter { val j_Stream = java.io.FileOutputStream.new(java.io.File.new(path), appendable); };
	ifElse (appendable)
	{
		pafp.p_makeAppendableFileOutputStream();
	}
	/*else*/
	{
		pafp.p_makeOverwrittenFileOutputStream();
	};
	/*return*/ pafp;
}

/*------------------------------------------------------------------------------
/**
	CID:	??
	DESC:	The constructor for BufferedOutputStream
**/
method unique PlaidBufferedOutputStream makePlaidBufferedOutputStream(unique OutputStream >> none OutputStream output)
{
	val unique PlaidBufferedOutputStream pbos = new freeze(output)
		with BufferedOutputStream
		{
			override val j_Stream = java.io.BufferedOutputStream.new(output.getStream());
		};
	/*return*/ pbos;
}

/*------------------------------------------------------------------------------
/**
	CID:	??
	DESC:	The constructor for BufferedInputStream
**/
method unique PlaidBufferedInputStream makePlaidBufferedInputStream(unique InputStream >> none InputStream input)
{
	val unique PlaidBufferedInputStream pbis = new freeze(input)
		with BufferedInputStream
		{
			override val j_Stream = java.io.BufferedInputStream.new(input.getStream());
		};
	/*return*/ pbis;
}

/*------------------------------------------------------------------------------
/**
	CID:	TC-SS-??
	DESC:	Test cases of plaidio.streams.filters package's features
**/
method void test_filters(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.streams.filters package's features");

	testbed.makeTestCase("create a alphabet file printer and write an array of bytes (20)", fn(tc) => {
		val size = 20;
		val unique PlaidAlphabetFilePrinter o = makePlaidAlphabetFilePrinter("c:\\temp\\alphabet.txt", false);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		val unique ByteArray a = makeByteArray(size);
		a.setBytes(com.akefirad.plaid.JavaHelper.generateRandomBytes(size, 32, 127));
		var unique InBoundInteger i = a.getIndexer();
		tc.debug("The randomly generated array contains:", verbose);
		while
		{
			isInBoundInteger(i);
		}
		/*do*/
		{
			tc.debug("'" + com.akefirad.plaid.JavaHelper.convertInteger2Character(a.get(i)) + "'", verbose);
			i.increaseOne();
		};
		o.writeAll(a);
		o.close();
	});

	testbed.makeTestCase("create a inverted case alphabet file printer and write an array of bytes (20)", fn(tc) => {
		val size = 20;
		val unique PlaidInvertCaseAlphabetFilePrinter o = makePlaidInvertCaseAlphabetFilePrinter("c:\\temp\\invertedcasealphabet.txt", false);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		val unique ByteArray a = makeByteArray(size);
		a.setBytes(com.akefirad.plaid.JavaHelper.generateRandomBytes(size, 32, 127));
		var unique InBoundInteger i = a.getIndexer();
		tc.debug("The randomly generated array contains:", verbose);
		while
		{
			isInBoundInteger(i);
		}
		/*do*/
		{
			tc.debug("'" + com.akefirad.plaid.JavaHelper.convertInteger2Character(a.get(i)) + "'", verbose);
			i.increaseOne();
		};
		o.writeAll(a);
		o.close();
	});

	testbed.makeTestCase("create a buffered output stream and write an array of bytes (20)", fn(tc) => {
		val size = 20;
		val unique PlaidBufferedOutputStream o = makePlaidBufferedOutputStream(makePlaidFileOutputStream("c:\\temp\\test5.bin", false));
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		val unique ByteArray a = makeByteArray(size);
		a.setBytes(com.akefirad.plaid.JavaHelper.generateRandomBytes(size, 33, 127));
		var unique InBoundInteger i = a.getIndexer();
		tc.debug("The randomly generated array contains:", verbose);
		while
		{
			isInBoundInteger(i);
		}
		/*do*/
		{
			tc.debug("'" + a.get(i) + "'", verbose);
			i.increaseOne();
		};
		o.writeAll(a);
		o.close();
	});

	testbed.makeTestCase("create a buffered input stream", fn(tc) => {
		val unique PlaidBufferedInputStream o = makePlaidBufferedInputStream(makePlaidFileInputStream("C:\\boot.ini"));
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		tc.assert(fn() => { debugIsInputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsCloseableStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFileInputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsBufferedInputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsMarkableStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsMarkedStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsClosedStream(o, verbose) == false; }, verbose);
		tc.debug("The stream is going to be marked...", verbose);
		o.mark(10);
		tc.assert(fn() => { debugIsInputStream(o, verbose) }, verbose);
		tc.assert(fn() => { debugIsCloseableStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFileInputStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsMarkableStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsMarkedStream(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsClosedStream(o, verbose) == false; }, verbose);
		tc.debug("The stream is going to be closed...", verbose);
		o.close();
		tc.assert(fn() => { debugIsInputStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsCloseableStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsFileInputStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsMarkableStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsMarkedStream(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsClosedStream(o, verbose); }, verbose);
	});

	testbed.makeTestCase("create a buffered input stream and read an integer", fn(tc) => {
		val unique PlaidBufferedInputStream o = makePlaidBufferedInputStream(makePlaidFileInputStream("C:\\boot.ini"));
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		tc.debug("The stream is going to read first byte of the file:", verbose);
		var immutable Int32 i = o.read();
		tc.debug("'" + i.toString() + "'", verbose);
		tc.assert(fn() => { debugIsInt32(i, verbose); }, verbose);		
		o.close();
	});

	testbed.runTestCases(verbose);
}
