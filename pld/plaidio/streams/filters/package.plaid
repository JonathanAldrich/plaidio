/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without ven the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-??
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.streams.outputs is basic statespace for SR-?? features
	FILE:	package.plaid
**/
package plaidio.streams.filters;

import com.akefirad.plaid.lang.makeByteArray;
import com.akefirad.plaid.lang.collections.ByteArray;

import plaidio.streams.outputs.OutputStream;
import plaidio.streams.outputs.FileOutputStream;

import plaidio.statecheckers.*;
import com.akefirad.plaid.lang.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

typedef state PlaidAlphabetFilePrinter = OutputStream with FileOutputStream with AlphabetFilePrinter

/*------------------------------------------------------------------------------
/**
	CID:	??
	DESC:	The constructor for AlphabetFilePrinter
**/
method unique PlaidAlphabetFilePrinter makePlaidAlphabetFilePrinter(immutable String path, immutable Boolean appendable)
{
	val unique PlaidAlphabetFilePrinter pafp = new PlaidAlphabetFilePrinter { val j_Stream = java.io.FileOutputStream.new(java.io.File.new(path), appendable); };
	ifElse (appendable)
	{
		pafp.p_makeAppendableFileOutputStream();
	}
	/*else*/
	{
		pafp.p_makeOverwrittenFileOutputStream();
	};
	/*return*/ pafp;
}

/*------------------------------------------------------------------------------
/**
	CID:	TC-SS-??
	DESC:	Test cases of plaidio.streams.filters package's features
**/
method void test_filters(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.streams.filters package's features");

	testbed.makeTestCase("create a alphabet file printer and write an array of bytes (20)", fn(tc) => {
		val size = 20;
		val unique PlaidAlphabetFilePrinter o = makePlaidAlphabetFilePrinter("c:\\temp\\alphabet.txt", false);
		tc.debug("'" + o.getStream().toString() + "'", verbose);
		val r = java.util.Random.new();
		var i = 0;
		while
		{
			i < size
		}
		/*do*/
		{
			var c = r.nextInt(255);
			tc.debug("'" + com.akefirad.plaid.JavaHelper.convertInteger2Character(c) + "'", verbose);
			o.write(c);
			i = i + 1;
		};
		o.close();
	});

	testbed.runTestCases(verbose);
}
