/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without ven the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	OutputStream.plaid
**/
package plaidio.streams;

import com.akefirad.plaid.lang.statecheckers.*;

//------------------------------------------------------------------------------
/**
	CID:	TS-??
	DESC:	This abstract class is the superclass of all classes representing an output stream of bytes.
			An output stream accepts output bytes and sends them to some sink.
			Applications that need to define a subclass of OutputStream must always
			provide at least a method that writes one byte of output.
**/
state OutputStream = CloseableStream with FlushableStream with
{
	method getStream() /*[immutable OutputStream >> immutable OutputStream this]*/;

    method write(immutable Int32 integer) /*[immutable OutputStream >> immutable OutputStream this]*/;

    method writeAll(immutable Array bytes) /*[immutable OutputStream >> immutable OutputStream this]*/
    {
    	writeSome(bytes, bytes.getIndexer());
    }

    method writeSome(immutable Array bytes, unique InBoundInteger indexer) /*[immutable OutputStream >> immutable OutputStream this]*/
    {
		while
		{
			isInBoundInteger(indexer);
		}
		/*do*/
		{
			write(bytes.get(indexer));
			indexer.increaseOne();
		};
    }

	method void close() /*[unique OutputStream this >> unique ClosedStream this]*/
	{
		p_close_OutputStream();
	}

	// Since, Plaid has no feature for calling base methods,
	// this protected method is to be used whenever close method is overridden.
	method void p_close_OutputStream() /*[unique OutputStream this >> unique ClosedStream this]*/
	{
		this <<- ClosedStream;
	}

    method void flush() /*[immutable OutputStream this >> immutable OutputStream this]*/
    {
        p_flush_OutputStream();
    }

    // Since, Plaid has no feature for calling base methods,
    // this protected method is to be used whenever flush method is overridden.
    method void p_flush_OutputStream() /*[immutable OutputStream this >> immutable OutputStream this]*/
    {
    }
}
