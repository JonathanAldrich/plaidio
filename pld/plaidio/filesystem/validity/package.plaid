/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-14
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package of plaid.io.filesystem.validity statespace
			contains all sub-types of Validity state region of Path typestate.
	FILE:	package.plaid
**/
package plaidio.filesystem.validity;

import plaidio.filesystem.makePath;

import plaidio.filesystem._debuger.debugIsPath;
import plaidio.filesystem.validity._debuger.debugIsValid;
import plaidio.filesystem.validity._debuger.debugIsInvalid;
import plaidio.filesystem.validity.valid._debuger.debugIsExistencyDimension;
import plaidio.filesystem.validity.valid._debuger.debugIsRelativityDimension;

import com.akefirad.plaid.testing.makeTestBed;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-14
	DESC:	Test plaidio.filesystem.validity package's features
**/
method void test_validity(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.filesystem.validity package's features");

	testbed.makeTestCase("TC-TS-16 make an invalid path (Windows-Based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Windows"))
		{
			val unique Path o = makePath("con");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsInvalid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose) == false; }, verbose);
		}
	});

	testbed.makeTestCase("TC-TS-17 make a valid path", fn(tc) => {
		val unique Path o = makePath("foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsInvalid(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-19 make a valid path which has existency dimension", fn(tc) => {
		val unique Path o = makePath("foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsInvalid(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistencyDimension(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-21 make a valid path which has relativity dimensions", fn(tc) => {
		val unique Path o = makePath("foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsInvalid(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsRelativityDimension(o, verbose); }, verbose);
	});

	testbed.runTestCases(verbose);
}
