/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-18
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package of plaid.filesystem.validity.valid
			contains all dimensions of Valid typestates
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-1121
	DESC:	Test plaidio.filesystem.validity.valid package's features
**/
method void test_valid(immutable Boolean verbose)
{
//	val testbed = makeTestBed();
//	var testcase = new Unit;
//	
//	testcase = makeTestCase("TC-TS-11211 make an existent path", fn(tc) => {
//		val unique Path v = makePath(java.lang.System.getProperty("user.dir"));
//		debug("'" + v + "'");
//		ifElse (isPath(v))					{ debug("The object is Path!"); }							/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
//		ifElse (isValid(v))					{ debug("The object is Valid!"); }							/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
//		ifElse (isExistencyDimension(v))	{ debug("The object has Existency dimension!"); }			/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
//		ifElse (isExistent(v))				{ debug("The object is Existent!"); }						/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
//		ifElse (isNonExistent(v))			{ debug("The object is NonExistent!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT NonExistent!"); };
//	});
//	testbed.addTestCase(testcase);
//
//	testcase = makeTestCase("TC-TS-11212 make a non-existent path", fn(tc) => {
//		val unique Path v = makePath(java.lang.System.getProperty("user.dir") + separator()+ "foo");
//		debug("'" + v + "'");
//		ifElse (isPath(v))					{ debug("The object is Path!"); }						/*else*/ { debug("The object is not Path!"); tc.fail(verbose); };
//		ifElse (isValid(v))					{ debug("The object is Valid!"); }						/*else*/ { debug("The object is not Valid!"); tc.fail(verbose); };
//		ifElse (isExistencyDimension(v))	{ debug("The object has Existency dimension!"); }		/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
//		ifElse (isExistent(v))				{ debug("The object is Existent!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT Existent!"); };
//		ifElse (isNonExistent(v))			{ debug("The object is NonExistent!"); }				/*else*/ { debug("The object is NOT NonExistent!"); tc.fail(verbose); };
//	});
//	testbed.addTestCase(testcase);
//
//	testcase = makeTestCase("TC-TS-112211 make an absolute path", fn(tc) => {
//		val unique Path v = makePath(java.lang.System.getProperty("user.dir") + separator() + "..");
//		debug("'" + v + "'");
//		ifElse (isPath(v))					{ debug("The object is Path!"); }							/*else*/ { debug("The object is not Path!"); tc.fail(verbose); };
//		ifElse (isValid(v))					{ debug("The object is Valid!"); }							/*else*/ { debug("The object is not Valid!"); tc.fail(verbose); };
//		ifElse (isRelativityDimension(v))	{ debug("The object has Relativity dimension!"); }			/*else*/ { debug("The object has NO Relativity dimension!"); tc.fail(verbose); };
//		ifElse (isAbsolute(v))				{ debug("The object is Absolute!"); }						/*else*/ { debug("The object is NOT Absolute!"); tc.fail(verbose); };
//		ifElse (isCanonical(v))				{ debug("The object is Canonical!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT Canonical!"); };
//		ifElse (isRelative(v))				{ debug("The object is Relative!"); tc.fail(verbose); }		/*else*/ { debug("The object is NOT Relative!"); };
//	});
//	testbed.addTestCase(testcase);
//
//	testcase = makeTestCase("TC-TS-112212 make a canonical path", fn(tc) => {
//		val unique Path v = makePath(java.lang.System.getProperty("user.dir"));
//		debug("'" + v + "'");
//		ifElse (isPath(v))					{ debug("The object is Path!"); }						/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
//		ifElse (isValid(v))					{ debug("The object is Valid!"); }						/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
//		ifElse (isRelativityDimension(v))	{ debug("The object has Relativity dimension!"); }		/*else*/ { debug("The object has NO Relativity dimension!"); tc.fail(verbose); };
//		ifElse (isAbsolute(v))				{ debug("The object is Absolute!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT Absolute!"); };
//		ifElse (isCanonical(v))				{ debug("The object is Canonical!"); }					/*else*/ { debug("The object is NOT Canonical!"); tc.fail(verbose); };
//		ifElse (isRelative(v))				{ debug("The object is Relative!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT Relative!"); };
//	});
//	testbed.addTestCase(testcase);
//
//	testcase = makeTestCase("TC-TS-11222 make an relative path", fn(tc) => {
//		val unique Path v = makePath("foo");
//		debug("'" + v + "'");
//		ifElse (isPath(v))					{ debug("The object is Path!"); }							/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
//		ifElse (isValid(v))					{ debug("The object is Valid!"); }							/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
//		ifElse (isRelativityDimension(v))	{ debug("The object has Relativity dimension!"); }			/*else*/ { debug("The object has NO Relativity dimension!"); tc.fail(verbose); };
//		ifElse (isAbsolute(v))				{ debug("The object is Absolute!"); tc.fail(verbose); }		/*else*/ { debug("The object is NOT Absolute!"); };
//		ifElse (isCanonical(v))				{ debug("The object is Canonical!"); }						/*else*/ { debug("The object is NOT Canonical!"); };
//		ifElse (isRelative(v))				{ debug("The object is Relative!"); }						/*else*/ { debug("The object is NOT Relative!"); tc.fail(verbose); };
//	});
//	testbed.addTestCase(testcase);
//
//	testbed.runTestCases(verbose);
}
