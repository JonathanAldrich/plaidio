/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-26
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem.validity.valid.relativity
			for subtypes of "D_Relativity" typestate.
	FILE:	package.plaid
**/

package plaidio.filesystem.validity.valid.relativity;

import plaidio.filesystem.makePath;

import plaidio.statecheckers.*;
import com.akefirad.plaid.lang.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-26
	DESC:	Test plaidio.filesystem.validity.valid.relativity package's features
**/
method void test_relativity(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.filesystem.validity.valid.relativity package's features");

	testbed.makeTestCase("TC-TS-28 make a non-relative path", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir"));
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Relativity(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonRelative(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsRelative(o, verbose) == false; }, verbose);
	});

	testbed.makeTestCase("TC-TS-29 make a relative path", fn(tc) => {
		val unique Path o = makePath("foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Relativity(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonRelative(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsRelative(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-ST-29.2 make a relative path and change it to non-relative", fn(tc) => {
		val unique Path o = makePath("foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Relativity(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonRelative(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsRelative(o, verbose); }, verbose);
		
		tc.debug("The object is going to become non-relative...", verbose);
		o.makeNonRelative();

		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Relativity(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonRelative(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsRelative(o, verbose) == false; }, verbose);
	});

	testbed.makeTestCase("TC-TS-28.2 make a non-relative path and get free space of the partition", fn(tc) => {
		val unique Path o = makePath("C:\\Windows");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Relativity(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonRelative(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsRelative(o, verbose) == false; }, verbose);
		
		val immutable Int64 i = o.getFreeSpace();
		tc.debug("'" + i + "'", verbose);
		tc.assert(fn() => { debugIsInt64(i, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-28.3 make a non-relative path and get total space of the partition", fn(tc) => {
		val unique Path o = makePath("C:\\Windows");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Relativity(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonRelative(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsRelative(o, verbose) == false; }, verbose);
		
		val immutable Int64 i = o.getTotalSpace();
		tc.debug("'" + i + "'", verbose);
		tc.assert(fn() => { debugIsInt64(i, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-28.3 make a non-relative path and get usable space of the partition", fn(tc) => {
		val unique Path o = makePath("C:\\Windows");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Relativity(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonRelative(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsRelative(o, verbose) == false; }, verbose);
		
		val immutable Int64 i = o.getUsableSpace();
		tc.debug("'" + i + "'", verbose);
		tc.assert(fn() => { debugIsInt64(i, verbose); }, verbose);
	});

	testbed.runTestCases(verbose);
}
