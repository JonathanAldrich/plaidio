/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-11221
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem.validity.valid.relativity
			for subtypes of "RelativityDimension" typestate.
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid.relativity;

import plaidio.filesystem.separator;
import plaidio.filesystem.makePath;
import plaidio.statecheckers.isPath;
import plaidio.statecheckers.isValid;
import plaidio.statecheckers.isRelativityDimension;
import plaidio.statecheckers.isNonRelative;
import plaidio.statecheckers.isAbsolute;
import plaidio.statecheckers.isCanonical;
import com.akefirad.plaid.testing.debug;
import com.akefirad.plaid.testing.makeTestBed;
import com.akefirad.plaid.testing.makeTestCase;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-11221
	DESC:	Test plaidio.filesystem.validity.valid.relativity package's features
**/
method void test_relativity(immutable Boolean verbose)
{
	val testbed = makeTestBed();
	var testcase = new Unit;
	
	testcase = makeTestCase("TC-TS-112211 make an absolute path", fn(tc) => {
		val unique Path v = makePath(java.lang.System.getProperty("user.dir") + separator() + "..");
		debug("'" + v + "'");
		ifElse (isPath(v))					{ debug("The object is Path!"); }							/*else*/ { debug("The object is not Path!"); tc.fail(verbose); };
		ifElse (isValid(v))					{ debug("The object is Valid!"); }							/*else*/ { debug("The object is not Valid!"); tc.fail(verbose); };
		ifElse (isRelativityDimension(v))	{ debug("The object has Relativity dimension!"); }			/*else*/ { debug("The object has NO Relativity dimension!"); tc.fail(verbose); };
		ifElse (isNonRelative(v))			{ debug("The object is NonRelative!"); }					/*else*/ { debug("The object is NOT NonRelative!"); tc.fail(verbose); };
		ifElse (isAbsolute(v))				{ debug("The object is Absolute!"); }						/*else*/ { debug("The object is NOT Absolute!"); tc.fail(verbose); };
		ifElse (isCanonical(v))				{ debug("The object is Canonical!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT Canonical!"); };
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-112212 make a canonical path", fn(tc) => {
		val unique Path v = makePath(java.lang.System.getProperty("user.dir"));
		debug("'" + v + "'");
		ifElse (isPath(v))					{ debug("The object is Path!"); }						/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
		ifElse (isValid(v))					{ debug("The object is Valid!"); }						/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
		ifElse (isRelativityDimension(v))	{ debug("The object has Relativity dimension!"); }		/*else*/ { debug("The object has NO Relativity dimension!"); tc.fail(verbose); };
		ifElse (isNonRelative(v))			{ debug("The object is NonRelative!"); }				/*else*/ { debug("The object is NOT NonRelative!"); tc.fail(verbose); };
		ifElse (isAbsolute(v))				{ debug("The object is Absolute!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT Absolute!"); };
		ifElse (isCanonical(v))				{ debug("The object is Canonical!"); }					/*else*/ { debug("The object is NOT Canonical!"); tc.fail(verbose); };
	});
	testbed.addTestCase(testcase);

	testbed.runTestCases(verbose);
}
