/**
 * Copyright (c) 2013 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-26
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	"NonRelative" subtypes of "D_Relativity" typestate.
	FILE:	NonRelative.plaid
**/
package plaidio.filesystem.validity.valid.relativity;

import plaidio.filesystem.validity.valid.D_Relativity;
import plaidio.filesystem.validity.valid.relativity.nonrelative.i_NonRelative;

	/*------------------------------------------------------------------------------
/**
	CID:	TS-28
	DESC:	"NonRelative" typestate which contains a non-relative valid path.
**/
state NonRelative case of D_Relativity
{
	//-----------------------------------------------------------------------------
	/**
		CID:	ST-28.1
		DESC:	Checks all dimensions of the object.
	**/
	method void p_InitNonRelative() /*[shared NonRelative >> shared NonRelative this]*/
	{
		this <- i_NonRelative;
		p_Finalize();
	}
	//method void p_InitNonRelative() /*[shared NonRelative >> shared NonRelative this]*/

	//-----------------------------------------------------------------------------
	/**
		CID:	ST-28.2
		DESC:	Returns the number of unallocated bytes in the partition named by this abstract path name.
	**/
	method immutable Int64 getFreeSpace() /*[pure NonRelative >> pure NonRelative this]*/
	{
		/*return*/ j_File.getFreeSpace();
	}
	//method immutable Int64 getFreeSpace() /*[pure NonRelative >> pure NonRelative this]*/

	//-----------------------------------------------------------------------------
	/**
		CID:	ST-28.3
		DESC:	Returns the size of the partition named by this abstract pathname.
	**/
	method immutable Int64 getTotalSpace() /*[pure NonRelative >> pure NonRelative this]*/
	{
		/*return*/ j_File.getTotalSpace();
	}
	//method immutable Int64 getTotalSpace() /*[pure NonRelative >> pure NonRelative this]*/

	//-----------------------------------------------------------------------------
	/**
		CID:	ST-28.4
		DESC:	Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname.
	**/
	method immutable Int64 getUsableSpace() /*[pure NonRelative >> pure NonRelative this]*/
	{
		/*return*/ j_File.getUsableSpace();
	}
	//method immutable Int64 getUsableSpace() /*[pure NonRelative >> pure NonRelative this]*/
}