/**
 * Copyright (c) 2013 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

/*------------------------------------------------------------------------------*/
/**
	CID:	SR-22
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem.validity.valid.existency
			contains subtypes of "D_Existency" typestate.
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid.existency;

import plaidio.filesystem.makePath;
import plaidio.filesystem.separator;

import plaidio.statecheckers.*;
import com.akefirad.plaid.lang.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-22
	DESC:	Test plaidio.filesystem.validity.valid.existency package's features
**/
method void test_existency(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.filesystem.validity.valid.existency package's features");
	
	testbed.makeTestCase("TC-TS-24 make an existent path", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir"));
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonExistent(o, verbose) == false; }, verbose);
	});

	testbed.makeTestCase("TC-TS-25 make a non-existent path", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir") + separator()+ "foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsNonExistent(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-24.2 make an existent path and get the time the file was last modified", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir"));
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		
		val immutable Int64 i = o.lastModified();
		tc.debug("'" + i + "'", verbose);
		tc.assert(fn() => { debugIsInt64(i, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-24.3 make an existent path and set the last modified time of file", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir"));
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		
		val immutable Int64 i = o.lastModified();
		tc.debug("'" + i + "'", verbose);

		o.setLastModified(i + 100000000);

		val immutable Int64 j = o.lastModified();
		tc.debug("'" + j + "'", verbose);
	});

	testbed.makeTestCase("TC-TS-24.5 make an non-executable file and change it (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/nonexecutablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileExecutability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonExecutableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExecutableFile(o, verbose) == false; }, verbose);

			tc.debug("The path is going to be executable...", verbose);
			o.setExecutableForAll(true);

			tc.assert(fn() => { debugIsNonExecutableFile(o, verbose) == false; }, verbose);
			tc.assert(fn() => { debugIsExecutableFile(o, verbose); }, verbose);

			tc.debug("The path is going to be non-executable...", verbose);
			o.setExecutableForAll(false);

			tc.assert(fn() => { debugIsNonExecutableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExecutableFile(o, verbose) == false; }, verbose);
		}
	});

	testbed.makeTestCase("TC-TS-24.7 make an non-readable file and change it (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/nonreadablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileReadability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonReadableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsReadableFile(o, verbose) == false; }, verbose);

			tc.debug("The path is going to be readable...", verbose);
			o.setReadableForAll(true);

			tc.assert(fn() => { debugIsNonReadableFile(o, verbose) == false; }, verbose);
			tc.assert(fn() => { debugIsReadableFile(o, verbose); }, verbose);

			tc.debug("The path is going to be non-readable...", verbose);
			o.setReadableForAll(false);

			tc.assert(fn() => { debugIsNonReadableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsReadableFile(o, verbose) == false; }, verbose);
		}
	});

	testbed.makeTestCase("TC-TS-24.9 make an non-writable file and change it (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/nonwritablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileWritability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonWritableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsWritableFile(o, verbose) == false; }, verbose);

			tc.debug("The path is going to be writable...", verbose);
			o.setWritableForAll(true);

			tc.assert(fn() => { debugIsNonWritableFile(o, verbose) == false; }, verbose);
			tc.assert(fn() => { debugIsWritableFile(o, verbose); }, verbose);

			tc.debug("The path is going to be non-writable...", verbose);
			o.setWritableForAll(false);

			tc.assert(fn() => { debugIsNonWritableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsWritableFile(o, verbose) == false; }, verbose);
		}
	});

	testbed.runTestCases(verbose);
}
