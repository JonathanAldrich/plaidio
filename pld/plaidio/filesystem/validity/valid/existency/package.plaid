/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-11211
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem.validity.valid.existency
			for subtypes of "ExistencyDimension" state region.
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid.existency;

import plaidio.filesystem.separator;
import plaidio.filesystem.makePath;
import plaidio.statecheckers.isPath;
import plaidio.statecheckers.isValid;
import plaidio.statecheckers.isExistencyDimension;
import plaidio.statecheckers.isExistent;
import plaidio.statecheckers.isNonExistent;
import plaidio.statecheckers.isPathTypeDimension;
import plaidio.statecheckers.isExPermissionDimension;
import plaidio.statecheckers.isNxPermissionDimension;
import com.akefirad.plaid.testing.debug;
import com.akefirad.plaid.testing.makeTestBed;
import com.akefirad.plaid.testing.makeTestCase;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-11211
	DESC:	Test plaidio.filesystem.validity.valid.existency package's features
**/
method void test_existency(immutable Boolean verbose)
{
	val testbed = makeTestBed();
	var testcase = new Unit;
	
	testcase = makeTestCase("TC-TS-112111 make an existent path which has existent permission dimension", fn(tc) => {
		val unique Path v = makePath(java.lang.System.getProperty("user.dir"));
		debug("'" + v + "'");
		ifElse (isPath(v))					{ debug("The object is Path!"); }					/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
		ifElse (isValid(v))					{ debug("The object is Valid!"); }					/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
		ifElse (isExistencyDimension(v))	{ debug("The object has Existency dimension!"); }	/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
		ifElse (isExistent(v))				{ debug("The object is Existent!"); }				/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
		ifElse (isExPermissionDimension(v))	{ debug("The object has ExPermissionDimension!"); }	/*else*/ { debug("The object has NO ExPermissionDimension!"); tc.fail(verbose); };
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-112112 make an existent path which has pathtype dimension", fn(tc) => {
		val unique Path v = makePath(java.lang.System.getProperty("user.dir"));
		debug("'" + v + "'");
		ifElse (isPath(v))					{ debug("The object is Path!"); }					/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
		ifElse (isValid(v))					{ debug("The object is Valid!"); }					/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
		ifElse (isExistencyDimension(v))	{ debug("The object has Existency dimension!"); }	/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
		ifElse (isExistent(v))				{ debug("The object is Existent!"); }				/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
		ifElse (isPathTypeDimension(v))		{ debug("The object has PathTypeDimension!"); }		/*else*/ { debug("The object has NO PathTypeDimension!"); tc.fail(verbose); };
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-112121 make a non-existent path which has nonexistent permission dimension", fn(tc) => {
		val unique Path v = makePath(java.lang.System.getProperty("user.dir") + separator()+ "foo");
		debug("'" + v + "'");
		ifElse (isPath(v))					{ debug("The object is Path!"); }					/*else*/ { debug("The object is not Path!"); tc.fail(verbose); };
		ifElse (isValid(v))					{ debug("The object is Valid!"); }					/*else*/ { debug("The object is not Valid!"); tc.fail(verbose); };
		ifElse (isExistencyDimension(v))	{ debug("The object has Existency dimension!"); } 	/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
		ifElse (isNonExistent(v))			{ debug("The object is NonExistent!"); }			/*else*/ { debug("The object is NOT NonExistent!"); tc.fail(verbose); };
		ifElse (isNxPermissionDimension(v))	{ debug("The object has NxPermissionDimension!"); }	/*else*/ { debug("The object has NO NxPermissionDimension!"); tc.fail(verbose); };
	});
	testbed.addTestCase(testcase);

	testbed.runTestCases(verbose);
}
