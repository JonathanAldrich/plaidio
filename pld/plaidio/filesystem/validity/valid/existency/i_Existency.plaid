/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-22
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	i_Existency.plaid
**/
package plaidio.filesystem.validity.valid.existency;

import plaidio.filesystem.validity.valid.ExistencyDimension;

/*------------------------------------------------------------------------------
/**
	CID:	TS-23
	DESC:	"i_Existency" typestate which is created to intialize ExistencyDimension state.
			This state should not be public.
**/
state i_Existency case of ExistencyDimension
{
	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-23.1
		DESC:	Checks whether the path exists or not, and within ExistencyDimension,
				changes the state of "this" into either "Existent" or "NonExistent".
	**/
	method void p_Finalize() /*[shared i_Existency >> shared ExistencyDimension this]*/
	{
		ifElse (j_File.exists())
		{
			p_MakeExistent();
		}
		/*else*/
		{
			p_MakeNonExistent();
		}
	}
	//method void p_Finalize() /*[shared i_Existency >> shared ExistencyDimension this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-23.2
		DESC:	Makes the object Existent.
	**/
	method void p_MakeExistent() /*[shared i_Existency >> shared Existent this]*/
	{
		this <- Existent;
		p_InitExistent();
	}
	//method void p_MakeExistent() /*[shared i_Existency >> shared Existent this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-23.3
		DESC:	Makes the object NonExistent.
	**/
	method void p_MakeNonExistent() /*[shared i_Existency >> shared NonExistent this]*/
	{
		this <- NonExistent;
		p_InitNonExistent();
	}
	//method void p_MakeNonExistent() /*[shared i_Existency >> shared NonExistent this]*/
}