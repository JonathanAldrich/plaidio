/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-11211131
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	i_Writability.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.expermission.writability;

import plaidio.filesystem.validity.valid.existency.existent.expermission.WritabilityDimension;

/*------------------------------------------------------------------------------
/**
	CID:	TS-112111310
	DESC:	"i_Writability" typestate which is created to intialize WritabilityDimension state.
			This state should not be public.
**/
state i_Writability case of WritabilityDimension
{
	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-1121113100
		DESC:	Checks whether the path writable or not, and within WritabilityDimension,
				changes the state of "this" into either "Writable" or "NonWritable".
	**/
	method void p_Finalize() /*[shared i_Writability >> shared WritabilityDimension this]*/
	{
		ifElse (j_File.canWrite())
		{
			p_MakeWritable();
		}
		/*else*/
		{
			p_MakeNonWritable();
		}
	}
	//method void p_Finalize() /*[shared i_Writability >> shared WritabilityDimension this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-1121113101
		DESC:	Makes the object Writable.
	**/
	method void p_MakeWritable() /*[shared i_Writability >> shared Writable this]*/
	{
			this <- Writable;
			p_InitializeWritable();
	}
	//method void p_MakeWritable() /*[shared i_Writability >> shared Writable this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-1121113102
		DESC:	Makes the object NonWritable.
	**/
	method void p_MakeNonWritable() /*[shared i_Writability >> shared NonWritable this]*/
	{
			this <- NonWritable;
			p_InitializeNonWritable();
	}
	//method void p_MakeNonWritable() /*[shared i_Writability >> shared NonWritable this]*/
}