/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-1121111
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.expermission;

import plaidio.filesystem.separator;
import plaidio.filesystem.makePath;
import plaidio.statecheckers.isPath;
import plaidio.statecheckers.isValid;
import plaidio.statecheckers.isExistencyDimension;
import plaidio.statecheckers.isExistent;
import plaidio.statecheckers.isExPermissionDimension;
import plaidio.statecheckers.isExecutabilityDimension;
import plaidio.statecheckers.isExecutable;
import plaidio.statecheckers.isNonExecutable;
import plaidio.statecheckers.isReadabilityDimension;
import plaidio.statecheckers.isNonReadable;
import plaidio.statecheckers.isReadable;
import plaidio.statecheckers.isWritabilityDimension;
import plaidio.statecheckers.isNonWritable;
import plaidio.statecheckers.isWritable;
import com.akefirad.plaid.testing.debug;
import com.akefirad.plaid.testing.makeTestBed;
import com.akefirad.plaid.testing.makeTestCase;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-1121111
	DESC:	Test plaidio.filesystem.validity.valid.existency.existent.expermission package's features
**/
method void test_expermission(immutable Boolean verbose)
{
	val testbed = makeTestBed();
	var testcase = new Unit;
	
	testcase = makeTestCase("TC-TS-11211111 make an executable path (UNIX)", fn(tc) => {
		ifElse(java.lang.System.getProperty("os.name") == "Linux")
		{
			val unique Path v = makePath("/home/radion/workspace/temp/executable");
			debug("'" + v + "'");
			ifElse (isPath(v))						{ debug("The object is Path!"); }								/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
			ifElse (isValid(v))						{ debug("The object is Valid!"); }								/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
			ifElse (isExistencyDimension(v))		{ debug("The object has Existency dimension!"); }				/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
			ifElse (isExistent(v))					{ debug("The object is Existent!"); }							/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
			ifElse (isExPermissionDimension(v))		{ debug("The object has ExPermissionDimension!"); }				/*else*/ { debug("The object has NO ExPermissionDimension!"); tc.fail(verbose); };
			ifElse (isExecutabilityDimension(v))	{ debug("The object has Executability dimension!"); }			/*else*/ { debug("The object has NO Executability dimension!"); tc.fail(verbose); };
			ifElse (isExecutable(v))				{ debug("The object is Executable!"); }							/*else*/ { debug("The object is NOT Executable!"); tc.fail(verbose); };
			ifElse (isNonExecutable(v))				{ debug("The object is NonExecutable!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT NonExecutable!"); };
		}
		/*else*/
		{
			debug("Warning: this test case is not applicable for non-unix-based OSs.");
		}
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-11211112 make a non-executable path (UNIX)", fn(tc) => {
		ifElse(java.lang.System.getProperty("os.name") == "Linux")
		{
			val unique Path v = makePath("/home/radion/workspace/temp/nonexecutable");
			debug("'" + v + "'");
			ifElse (isPath(v))						{ debug("The object is Path!"); }								/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
			ifElse (isValid(v))						{ debug("The object is Valid!"); }								/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
			ifElse (isExistencyDimension(v))		{ debug("The object has Existency dimension!"); }				/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
			ifElse (isExistent(v))					{ debug("The object is Existent!"); }							/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
			ifElse (isExPermissionDimension(v))		{ debug("The object has ExPermissionDimension!"); }				/*else*/ { debug("The object has NO ExPermissionDimension!"); tc.fail(verbose); };
			ifElse (isExecutabilityDimension(v))	{ debug("The object has Executability dimension!"); }			/*else*/ { debug("The object has NO Executability dimension!"); tc.fail(verbose); };
			ifElse (isExecutable(v))				{ debug("The object is Executable!"); tc.fail(verbose); }		/*else*/ { debug("The object is NOT Executable!"); };
			ifElse (isNonExecutable(v))				{ debug("The object is NonExecutable!"); }						/*else*/ { debug("The object is NOT NonExecutable!"); tc.fail(verbose); };
		}
		/*else*/
		{
			debug("Warning: this test case is not applicable for non-unix-based OSs.");
		}
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-11211121 make a non-readable path (UNIX)", fn(tc) => {
		ifElse(java.lang.System.getProperty("os.name") == "Linux")
		{
			val unique Path v = makePath("/home/radion/workspace/temp/nonreadable");
			debug("'" + v + "'");
			ifElse (isPath(v))						{ debug("The object is Path!"); }								/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
			ifElse (isValid(v))						{ debug("The object is Valid!"); }								/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
			ifElse (isExistencyDimension(v))		{ debug("The object has Existency dimension!"); }				/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
			ifElse (isExistent(v))					{ debug("The object is Existent!"); }							/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
			ifElse (isExPermissionDimension(v))		{ debug("The object has ExPermissionDimension!"); }				/*else*/ { debug("The object has NO ExPermissionDimension!"); tc.fail(verbose); };
			ifElse (isReadabilityDimension(v))		{ debug("The object has Readability dimension!"); }				/*else*/ { debug("The object has NO Readability dimension!"); tc.fail(verbose); };
			ifElse (isReadable(v))					{ debug("The object is Readable!"); tc.fail(verbose); }			/*else*/ { debug("The object is NOT Readable!"); };
			ifElse (isNonReadable(v))				{ debug("The object is NonReadable!"); }						/*else*/ { debug("The object is NOT NonReadable!"); tc.fail(verbose); };
		}
		/*else*/
		{
			debug("Warning: this test case is not applicable for non-unix-based OSs.");
		}
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-11211122 make a readable path (UNIX)", fn(tc) => {
		ifElse(java.lang.System.getProperty("os.name") == "Linux")
		{
			val unique Path v = makePath("/home/radion/workspace/temp/readable");
			debug("'" + v + "'");
			ifElse (isPath(v))						{ debug("The object is Path!"); }								/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
			ifElse (isValid(v))						{ debug("The object is Valid!"); }								/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
			ifElse (isExistencyDimension(v))		{ debug("The object has Existency dimension!"); }				/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
			ifElse (isExistent(v))					{ debug("The object is Existent!"); }							/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
			ifElse (isExPermissionDimension(v))		{ debug("The object has ExPermissionDimension!"); }				/*else*/ { debug("The object has NO ExPermissionDimension!"); tc.fail(verbose); };
			ifElse (isReadabilityDimension(v))		{ debug("The object has Readability dimension!"); }				/*else*/ { debug("The object has NO Readability dimension!"); tc.fail(verbose); };
			ifElse (isReadable(v))					{ debug("The object is Readable!"); }							/*else*/ { debug("The object is NOT Readable!"); tc.fail(verbose); };
			ifElse (isNonReadable(v))				{ debug("The object is NonReadable!"); tc.fail(verbose); }		/*else*/ { debug("The object is NOT NonReadable!"); };
		}
		/*else*/
		{
			debug("Warning: this test case is not applicable for non-unix-based OSs.");
		}
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-11211131 make a non-writable path (UNIX)", fn(tc) => {
		ifElse(java.lang.System.getProperty("os.name") == "Linux")
		{
			val unique Path v = makePath("/home/radion/workspace/temp/nonwritable");
			debug("'" + v + "'");
			ifElse (isPath(v))						{ debug("The object is Path!"); }								/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
			ifElse (isValid(v))						{ debug("The object is Valid!"); }								/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
			ifElse (isExistencyDimension(v))		{ debug("The object has Existency dimension!"); }				/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
			ifElse (isExistent(v))					{ debug("The object is Existent!"); }							/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
			ifElse (isExPermissionDimension(v))		{ debug("The object has ExPermissionDimension!"); }				/*else*/ { debug("The object has NO ExPermissionDimension!"); tc.fail(verbose); };
			ifElse (isWritabilityDimension(v))		{ debug("The object has WritabilityDimension!"); }				/*else*/ { debug("The object has NO WritabilityDimension!"); tc.fail(verbose); };
			ifElse (isWritable(v))					{ debug("The object is Writable!"); tc.fail(verbose); }			/*else*/ { debug("The object is NOT Writable!"); };
			ifElse (isNonWritable(v))				{ debug("The object is NonWritable!"); }						/*else*/ { debug("The object is NOT NonWritable!"); tc.fail(verbose); };
		}
		/*else*/
		{
			debug("Warning: this test case is not applicable for non-unix-based OSs.");
		}
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-11211132 make a writable path (UNIX)", fn(tc) => {
		ifElse(java.lang.System.getProperty("os.name") == "Linux")
		{
			val unique Path v = makePath("/home/radion/workspace/temp/writable");
			debug("'" + v + "'");
			ifElse (isPath(v))						{ debug("The object is Path!"); }								/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
			ifElse (isValid(v))						{ debug("The object is Valid!"); }								/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
			ifElse (isExistencyDimension(v))		{ debug("The object has Existency dimension!"); }				/*else*/ { debug("The object has NO Existency dimension!"); tc.fail(verbose); };
			ifElse (isExistent(v))					{ debug("The object is Existent!"); }							/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
			ifElse (isExPermissionDimension(v))		{ debug("The object has ExPermissionDimension!"); }				/*else*/ { debug("The object has NO ExPermissionDimension!"); tc.fail(verbose); };
			ifElse (isWritabilityDimension(v))		{ debug("The object has WritabilityDimension!"); }				/*else*/ { debug("The object has NO WritabilityDimension!"); tc.fail(verbose); };
			ifElse (isWritable(v))					{ debug("The object is Writable!"); }							/*else*/ { debug("The object is NOT Writable!"); tc.fail(verbose); };
			ifElse (isNonWritable(v))				{ debug("The object is NonWritable!"); tc.fail(verbose); }		/*else*/ { debug("The object is NOT NonWritable!"); };
		}
		/*else*/
		{
			debug("Warning: this test case is not applicable for non-unix-based OSs.");
		}
	});
	testbed.addTestCase(testcase);

	testbed.runTestCases(verbose);
}
