/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-67
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	i_UnknownWritability.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.pathtype.unknownpermission.unknownwritability;

import plaidio.filesystem.validity.valid.existency.existent.pathtype.unknownpermission.D_UnknownWritability;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.unknownpermission.unknownwritability.WritableUnknown;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.unknownpermission.unknownwritability.NonWritableUnknown;

/*------------------------------------------------------------------------------
/**
	CID:	TS-81
	DESC:	"i_UnknownWritability" typestate which initializes D_UnknownWritability state region.
**/
state i_UnknownWritability case of D_UnknownWritability
{
	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-81.1
		DESC:	Checks whether the path is readable or not, and within D_UnknownWritability,
				changes the state of "this" into either "WritableUnknown" or "NonWritableUnknown".
	**/
	method void p_Finalize() /*[shared i_UnknownWritability >> shared D_UnknownWritability this]*/
	{
		ifElse (j_File.canWrite())
		{
			p_MakeWritableUnknown();
		}
		/*else*/
		{
			p_MakeNonWritableUnknown();
		}
	}
	//method void p_Finalize() /*[shared i_UnknownWritability >> shared D_UnknownWritability this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-81.2
		DESC:	Makes the object NonWritableUnknown.
	**/
	method void p_MakeNonWritableUnknown() /*[shared i_UnknownWritability >> shared NonWritableUnknown this]*/
	{
		this <- NonWritableUnknown;
		p_InitNonWritableUnknown();
	}
	//method void p_MakeNonWritableUnknown() /*[shared i_UnknownWritability >> shared NonWritableUnknown this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-81.3
		DESC:	Makes the object WritableUnknown.
	**/
	method void p_MakeWritableUnknown() /*[shared i_UnknownWritability >> shared WritableUnknown this]*/
	{
		this <- WritableUnknown;
		p_InitWritableUnknown();
	}
	//method void p_MakeWritableUnknown() /*[shared i_UnknownWritability >> shared WritableUnknown this]*/
}