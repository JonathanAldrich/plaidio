/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-65
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	i_FileWritability.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission.filewritability;

import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission.D_FileWritability;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission.filereadability.WritableFile;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission.filereadability.NonWritableFile;

/*------------------------------------------------------------------------------
/**
	CID:	TS-76
	DESC:	"i_FileWritability" typestate which initializes D_FileWritability state region.
**/
state i_FileWritability case of D_FileWritability
{
	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-76.1
		DESC:	Checks whether the path is readable or not, and within D_FileWritability,
				changes the state of "this" into either "WritableFile" or "NonWritableFile".
	**/
	method void p_Finalize() /*[shared i_FileWritability >> shared D_FileWritability this]*/
	{
		ifElse (j_File.canWrit())
		{
			p_MakeWritabaleFile();
		}
		/*else*/
		{
			p_MakeNonWritabaleFile();
		}
	}
	//method void p_Finalize() /*[shared i_FileWritability >> shared D_FileWritability this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-76.2
		DESC:	Makes the object NonWritableFile.
	**/
	method void p_MakeNonWritable() /*[shared i_FileWritability >> shared NonWritableFile this]*/
	{
		this <- NonWritableFile;
		p_InitNonWritableFile();
	}
	//method void p_MakeNonWritable() /*[shared i_FileWritability >> shared NonWritableFile this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-76.3
		DESC:	Makes the object WritableFile.
	**/
	method void p_MakeWritableFile() /*[shared i_FileWritability >> shared WritableFile this]*/
	{
		this <- WritableFile;
		p_InitWritableFile();
	}
	//method void p_MakeWritableFile() /*[shared i_FileWritability >> shared WritableFile this]*/
}