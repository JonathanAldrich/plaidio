/**
 * Copyright (c) 2013 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-46
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission
			contains contains all dimensions of Folder typestates
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.folderreadability;

import plaidio.filesystem.makePath;

import plaidio.filesystem.validity.valid.existency.Existent;

import plaidio.statecheckers.*;
import com.akefirad.plaid.lang.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-56
**/
method void test_folderreadability(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.folderreadability package's features");

	testbed.makeTestCase("ST-62.2 make an existent readable folder path and get its childs as string", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir"));
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFolder(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FolderReadability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsReadableFolder(o, verbose); }, verbose);

		val unique List<immutable String> childs = o.getChildsAsString();

		ifElse (childs.isEmpty())
		{
			tc.debug("The folder is empty!", verbose);
		}
		/*else*/
		{
			var i = 0;
			var child = new Unit;
			while
			{
				child = childs.get(i);
				isNil(child) == false;
			}
			/*do*/
			{
				tc.debug("'" + child + "'", verbose);
				tc.assert(fn() => { debugIsString(child, verbose); }, verbose);
				i = i + 1;
			};
		}
	});

	testbed.makeTestCase("ST-62.3 make an existent readable folder path and get its childs as path", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir"));
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFolder(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FolderReadability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsReadableFolder(o, verbose); }, verbose);

		val unique List<immutable Existent> childs = o.getChildsAsPath();

		ifElse (childs.isEmpty())
		{
			tc.debug("The folder is empty!", verbose);
		}
		/*else*/
		{
			var i = 0;
			var child = new Unit;
			while
			{
				child = childs.get(i);
				isNil(child) == false;
			}
			/*do*/
			{
				tc.debug("'" + child + "'", verbose);
				tc.assert(fn() => { debugIsExistent(child, verbose); }, verbose);
				i = i + 1;
			};
		}
	});

	testbed.runTestCases(verbose);
}