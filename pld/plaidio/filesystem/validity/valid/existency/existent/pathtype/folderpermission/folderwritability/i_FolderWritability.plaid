/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-66
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	i_FolderWritability.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.folderwritability;

import plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.D_FolderWritability;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.folderreadability.WritableFolder;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.folderreadability.NonWritableFolder;

/*------------------------------------------------------------------------------
/**
	CID:	TS-78
	DESC:	"i_FolderWritability" typestate which initializes D_FolderWritability state region.
**/
state i_FolderWritability case of D_FolderWritability
{
	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-78.1
		DESC:	Checks whether the path is readable or not, and within D_FolderWritability,
				changes the state of "this" into either "WritableFolder" or "NonWritableFolder".
	**/
	method void p_Finalize() /*[shared i_FolderWritability >> shared D_FolderWritability this]*/
	{
		ifElse (j_Folder.canWrit())
		{
			p_MakeWritabaleFolder();
		}
		/*else*/
		{
			p_MakeNonWritabaleFolder();
		}
	}
	//method void p_Finalize() /*[shared i_FolderWritability >> shared D_FolderWritability this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-78.2
		DESC:	Makes the object NonWritableFolder.
	**/
	method void p_MakeNonWritable() /*[shared i_FolderWritability >> shared NonWritableFolder this]*/
	{
		this <- NonWritableFolder;
		p_InitNonWritableFolder();
	}
	//method void p_MakeNonWritable() /*[shared i_FolderWritability >> shared NonWritableFolder this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-78.3
		DESC:	Makes the object WritableFolder.
	**/
	method void p_MakeWritableFolder() /*[shared i_FolderWritability >> shared WritableFolder this]*/
	{
		this <- WritableFolder;
		p_InitWritableFolder();
	}
	//method void p_MakeWritableFolder() /*[shared i_FolderWritability >> shared WritableFolder this]*/
}