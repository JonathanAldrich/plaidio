/**
 * Copyright (c) 2013 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-31
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem.validity.valid.existency.existent.pathtype
			contains all subtypes of Existent typestates
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.pathtype;

import plaidio.filesystem.makePath;
import plaidio.filesystem.separator;

import plaidio.statecheckers.*;
import com.akefirad.plaid.lang.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-31
	DESC:	Test plaidio.filesystem.validity.valid.existency.existent.pathtype package's features
**/
method void test_pathtype(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.filesystem.validity.valid.existency.existent.pathtype package's features");
	
	testbed.makeTestCase("TC-TS-24 make an existent file path", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir") + separator() + "build.xml");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFolder(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsUnknown(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsD_FileExecutability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileReadability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileWritability(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-24 make an existent folder path", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir"));
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFile(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsFolder(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsUnknown(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsD_FolderExecutability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FolderReadability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FolderWritability(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-24 make an existent unknown path (#N/A)", fn(tc) => {
		tc.debug("This typestate cannot be tested.", verbose);
//		val unique Path o = makePath(java.lang.System.getProperty("user.dir"));
//		tc.debug("'" + o + "'", verbose);
//		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
//		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
//		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
//		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
//		tc.assert(fn() => { debugIsFile(o, verbose) == false; }, verbose);
//		tc.assert(fn() => { debugIsFolder(o, verbose) == false; }, verbose);
//		tc.assert(fn() => { debugIsUnknown(o, verbose); }, verbose);
//		tc.assert(fn() => { debugIsD_UnknownExecutability(o, verbose); }, verbose);
//		tc.assert(fn() => { debugIsD_UnknownReadability(o, verbose); }, verbose);
//		tc.assert(fn() => { debugIsD_UnknownWritability(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-24 make an existent file path and get the length of file", fn(tc) => {
		val unique Path o = makePath(java.lang.System.getProperty("user.dir") + separator() + "build.xml");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFolder(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsUnknown(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsD_FileExecutability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileReadability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileWritability(o, verbose); }, verbose);

		val immutable Int64 i = o.length();
		tc.debug("'" + i + "'", verbose);
		tc.assert(fn() => { debugIsInt64(i, verbose); }, verbose);
	});

	testbed.runTestCases(verbose);
}
