/**
 * Copyright (c) 2013 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-45
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission
			contains contains all dimensions of File typestates
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission;

import plaidio.filesystem.makePath;

import plaidio.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-45
**/
method void test_filepermission(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission package's features");

	testbed.makeTestCase("TC-TS-58 make an existent non-readable file path (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/nonreadablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileReadability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonReadableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsReadableFile(o, verbose) == false; }, verbose);
		}
	});

	testbed.makeTestCase("TC-TS-59 make an existent readable file path (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/readablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileReadability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonReadableFile(o, verbose) == false; }, verbose);
			tc.assert(fn() => { debugIsReadableFile(o, verbose); }, verbose);
		}
	});

	testbed.makeTestCase("TC-TS-68 make an existent non-writable file path (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/nonwritablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileWritability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonWritableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsWritableFile(o, verbose) == false; }, verbose);
		}
	});

	testbed.makeTestCase("TC-TS-69 make an existent writable file path (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/writablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileWritability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonWritableFile(o, verbose) == false; }, verbose);
			tc.assert(fn() => { debugIsWritableFile(o, verbose); }, verbose);
		}
	});

	testbed.makeTestCase("TC-TS-85 make an existent non-executable file path (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/nonexecutablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileExecutability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonExecutableFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExecutableFile(o, verbose) == false; }, verbose);
		}
	});

	testbed.makeTestCase("TC-TS-86 make an existent executable file path (UNIX-based)", fn(tc) => {
		if (java.lang.System.getProperty("os.name").contains("Linux"))
		{
			val unique Path o = makePath("/home/radion/workspace/temp/executablefile");
			tc.debug("'" + o + "'", verbose);
			tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsD_FileExecutability(o, verbose); }, verbose);
			tc.assert(fn() => { debugIsNonExecutableFile(o, verbose) == false; }, verbose);
			tc.assert(fn() => { debugIsExecutableFile(o, verbose); }, verbose);
		}
	});

	testbed.runTestCases(verbose);
}
