/**
 * Copyright (c) 2013 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-94
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	i_UnknownExecutability.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.pathtype.unknownpermission.unknownexecutability;

import plaidio.filesystem.validity.valid.existency.existent.pathtype.unknownpermission.D_UnknownExecutability;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.unknownpermission.unknownexecutability.ExecutableUnknown;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.unknownpermission.unknownexecutability.NonExecutableUnknown;

/*------------------------------------------------------------------------------
/**
	CID:	TS-95
	DESC:	"i_UnknownExecutability" typestate which initializes D_UnknownExecutability state region.
**/
state i_UnknownExecutability case of D_UnknownExecutability
{
	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-95.1
		DESC:	Checks whether the path is readable or not, and within D_UnknownExecutability,
				changes the state of "this" into either "ExecutableUnknown" or "NonExecutableUnknown".
	**/
	method void p_Finalize() /*[shared i_UnknownExecutability >> shared D_UnknownExecutability this]*/
	{
		ifElse (j_File.canExecute())
		{
			p_MakeExecutableUnknown();
		}
		/*else*/
		{
			p_MakeNonExecutableUnknown();
		}
	}
	//method void p_Finalize() /*[shared i_UnknownExecutability >> shared D_UnknownExecutability this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-95.2
		DESC:	Makes the object NonExecutableUnknown.
	**/
	method void p_MakeNonExecutableUnknown() /*[shared i_UnknownExecutability >> shared NonExecutableUnknown this]*/
	{
		this <- NonExecutableUnknown;
		p_InitNonExecutableUnknown();
	}
	//method void p_MakeNonExecutableUnknown() /*[shared i_UnknownExecutability >> shared NonExecutableUnknown this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-95.3
		DESC:	Makes the object ExecutableUnknown.
	**/
	method void p_MakeExecutableUnknown() /*[shared i_UnknownExecutability >> shared ExecutableUnknown this]*/
	{
		this <- ExecutableUnknown;
		p_InitExecutableUnknown();
	}
	//method void p_MakeExecutableUnknown() /*[shared i_UnknownExecutability >> shared ExecutableUnknown this]*/
}