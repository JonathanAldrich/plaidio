/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-56
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	i_FolderReadability.plaid
**/
package plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.folderreadability;

import plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.D_FolderReadability;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.folderreadability.ReadableFolder;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.folderpermission.folderreadability.NonReadableFolder;

/*------------------------------------------------------------------------------
/**
	CID:	TS-77
	DESC:	"i_FolderReadability" typestate which initializes D_FolderReadability state region.
**/
state i_FolderReadability case of D_FolderReadability
{
	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-77.1
		DESC:	Checks whether the path is readable or not, and within D_FolderReadability,
				changes the state of "this" into either "ReadableFolder" or "NonReadableFolder".
	**/
	method void p_Finalize() /*[shared i_FolderReadability >> shared D_FolderReadability this]*/
	{
		ifElse (j_Folder.canRead())
		{
			p_MakeReadabaleFolder();
		}
		/*else*/
		{
			p_MakeNonReadabaleFolder();
		}
	}
	//method void p_Finalize() /*[shared i_FolderReadability >> shared D_FolderReadability this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-77.2
		DESC:	Makes the object NonReadableFolder.
	**/
	method void p_MakeNonReadable() /*[shared i_FolderReadability >> shared NonReadableFolder this]*/
	{
		this <- NonReadableFolder;
		p_InitNonReadableFolder();
	}
	//method void p_MakeNonReadable() /*[shared i_FolderReadability >> shared NonReadableFolder this]*/

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-77.3
		DESC:	Makes the object ReadableFolder.
	**/
	method void p_MakeReadableFolder() /*[shared i_FolderReadability >> shared ReadableFolder this]*/
	{
		this <- ReadableFolder;
		p_InitReadableFolder();
	}
	//method void p_MakeReadableFolder() /*[shared i_FolderReadability >> shared ReadableFolder this]*/
}