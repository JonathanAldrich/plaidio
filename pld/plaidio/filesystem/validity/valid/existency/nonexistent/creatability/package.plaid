/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-36
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem.validity.valid.existency.nonexistent.creatability
			contains all sub-typestates of NonExistent typestates
	FILE:	package.plaid
**/
package plaidio.filesystem.validity.valid.existency.nonexistent.creatability;

import plaidio.filesystem.makePath;
import plaidio.filesystem.separator;

import plaidio.statecheckers.*;

import com.akefirad.plaid.testing.makeTestBed;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-36
	DESC:	Test plaidio.filesystem.validity.valid.existency.nonexistent.creatability package's features
**/
method void test_creatability(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.filesystem.validity.valid.existency.nonexistent.creatability package's features");
	
	testbed.makeTestCase("TC-TS-38 make a creatable path", fn(tc) => {
		val unique Path o = makePath("foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsCreatable(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonCreatable(o, verbose) == false; }, verbose);
	});

	testbed.makeTestCase("TC-TS-39 make a non-creatable path", fn(tc) => {
		val unique Path o = makePath("foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsCreatable(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsNonCreatable(o, verbose); }, verbose);
	});
	
	testbed.makeTestCase("TC-ST-38.2 make a non-existent path and create it as a file.", fn(tc) => {
		val unique Path o = makePath("foo.file");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsCreatable(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonCreatable(o, verbose) == false; }, verbose);

		tc.debug("The path is going to be created as a file!", verbose);
		o.createAsFile();

		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFolder(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsUnknown(o, verbose) == false; }, verbose);
	});

	testbed.makeTestCase("TC-ST-38.3 make a non-existent path and create it as a folder.", fn(tc) => {
		val unique Path o = makePath("foo.folder\\bar.folder");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsCreatable(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsNonCreatable(o, verbose) == false; }, verbose);

		tc.debug("The path is going to be created as a folder!", verbose);
		o.createAsFolder();

		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFile(o, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsFolder(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsUnknown(o, verbose) == false; }, verbose);
	});
	
	testbed.runTestCases(verbose);
}
