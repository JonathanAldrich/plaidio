/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-36
	AUTHOR: Rad Akefirad akefirad@gmail.com
	FILE:	Creatable.plaid
**/
package plaidio.filesystem.validity.valid.existency.nonexistent.creatability;

import plaidio.filesystem.validity.valid.existency.NonExistent;

import plaidio.statecheckers.*;

/*------------------------------------------------------------------------------
/**
	CID:	TS-38
	DESC:	"Creatable" typestate which represent a creatable permission state.
**/
state Creatable case of NonExistent
{
	//-----------------------------------------------------------------------------
	/**
		CID:	ST-38.1
		DESC:	Checks all dimensions of the object.
	**/
	method void p_InitCreatable() /*[shared Creatable >> shared Creatable this]*/
	{
	}
	//method void p_InitCreatable() /*[shared Creatable >> shared Creatable this]*/

	//-----------------------------------------------------------------------------
	/**
		CID:	ST-38.2
		DESC:	Automically creates a new, empty file named by this abstract pathname
				if and only if a file with this name does not yet exist.
	**/
	method createAsFile() /*[unique Creatable >> unique Valid this]*/
	{
		p_InitPath();
		if (isCreatable(this))
		{
			j_File.createNewFile();
			p_InitPath();
		};
	}
	//method void createAsFile() /*[unique Creatable >> unique Valid this]*/

	//-----------------------------------------------------------------------------
	/**
		CID:	ST-38.3
		DESC:	Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories.
				Note that if this operation fails it may have succeeded in creating some of the necessary parent directories.
	**/
	method createAsFolder() /*[unique Creatable >> unique Valid this]*/
	{
		p_InitPath();
		if (isCreatable(this))
		{
			j_File.mkdirs();
			p_InitPath();
		};
	}
	//method void createAsFolder() /*[unique Creatable >> unique Valid this]*/
}