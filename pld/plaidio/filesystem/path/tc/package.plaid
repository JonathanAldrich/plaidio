/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-1.1.1
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Test cases of plaid.io.filesystem.path package.
	FILE:	package.plaid
**/
package plaidio.filesystem.path.tc;

import plaidio.filesystem.*;
import plaidio.filesystem.path.*;
import plaidio.filesystem.path.valid.*;

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1.1.2.1
	DESC:	Test case for ST-1.1.1.2.1
**/
method TC_ST_1_1_1_2_1()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.1.2.1.a:");
	val unique Path p1 = makePath(java.lang.System.getProperty("user.dir"));
	printLine("Valid Path (existent): '" + p1.getPathName() + "'");
	p1.validate();
	p1.checkExistency();
	match (p1)
	{
		case Existent { printLine("Typestate: Existent"); }
		case NonExistent { printLine("Typestate: NonExistent"); }
	};
    printLine("Successful!");

    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.1.2.1.b:");
	val unique Path p2 = makePath("foo");
	printLine("Valid Path (nonexistent): '" + p2.getPathName() + "'");
	p2.validate();
	p2.checkExistency();
	match (p2)
	{
		case Existent { printLine("Typestate: Existent"); }
		case NonExistent { printLine("Typestate: NonExistent"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1.1.2.2
	DESC:	Test case for ST-1.1.1.2.2
**/
method TC_ST_1_1_1_2_2()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.1.2.2:");
	val unique Path p = makePath("foo");
	p.validate();
	val immutable String s = p.getAbsolutePathString();
	printLine("Valid.getAbsolutePathString() returns '" + s + "'");
	match (s)
	{
		case String { printLine("Typestate: String"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1.1.2.3
	DESC:	Test case for ST-1.1.1.2.3
**/
method TC_ST_1_1_1_2_3()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.1.2.3:");
	val unique Path p = makePath("foo");
	p.validate();
	val unique Valid v = p.getAbsoluteValid();
	printLine("Valid.getAbsoluteValid() returns '" + v + "'");
	match (v)
	{
		case Valid { printLine("Typestate: Valid"); }
	};
    printLine("Successful!");
}
