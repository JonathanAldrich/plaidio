/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-11212111
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	"Creatability" subtypes of "CreatabilityDimension" typestate.
	FILE:	NonCreatable.plaid
**/
package plaidio.filesystem.path.valid.existency.nonexistent.nxpermission.creatability;

import plaidio.filesystem.separator;
import plaidio.filesystem.makePath;
import plaidio.statecheckers.isPath;
import plaidio.statecheckers.isValid;
import plaidio.statecheckers.isExistencyDimension;
import plaidio.statecheckers.isExistent;
import plaidio.statecheckers.isNonExistent;
import plaidio.statecheckers.isNxPermissionDimension;
import plaidio.statecheckers.isCreatabilityDimension;
import plaidio.statecheckers.isCreatable;
import plaidio.statecheckers.isNonCreatable;
import plaidio.statecheckers.isExPermissionDimension;
import plaidio.statecheckers.isExecutabilityDimension;
import plaidio.statecheckers.isReadabilityDimension;
import plaidio.statecheckers.isWritabilityDimension;
import plaidio.statecheckers.isPathTypeDimension;
import plaidio.statecheckers.isLeaf;
import plaidio.statecheckers.isFile;
import plaidio.statecheckers.isRelativityDimension;
import plaidio.statecheckers.isRelative;
import plaidio.statecheckers.isNonRelative;
import plaidio.statecheckers.isCanonical;
import com.akefirad.plaid.testing.debug;
import com.akefirad.plaid.testing.makeTestBed;
import com.akefirad.plaid.testing.makeTestCase;

/*------------------------------------------------------------------------------
/**
	CID:	TC-SR-11212111
	DESC:	Test plaidio.filesystem.path.valid.existency.existent.expermission.creatability package's features
**/
method void test_creatability(immutable Boolean verbose)
{
	val testbed = makeTestBed();
	var testcase = new Unit;
	
	testcase = makeTestCase("TC-ST-112121112 make a non-existent path and create it as a file.", fn(tc) => {
		val unique Path v = makePath(java.lang.System.getProperty("user.dir") + separator() + "foo");
		debug("'" + v + "'");
		ifElse (isPath(v))						{ debug("The object is Path!"); }							/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
		ifElse (isValid(v))						{ debug("The object is Valid!"); }							/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
		ifElse (isExistencyDimension(v))		{ debug("The object has ExistencyDimension!"); }			/*else*/ { debug("The object has NO ExistencyDimension!"); tc.fail(verbose); };
		ifElse (isExistent(v))					{ debug("The object is Existent!"); tc.fail(verbose); }		/*else*/ { debug("The object is NOT Existent!"); };
		ifElse (isNonExistent(v))				{ debug("The object is NonExistent!"); }					/*else*/ { debug("The object is NOT NonExistent!"); tc.fail(verbose); };
		ifElse (isNxPermissionDimension(v))		{ debug("The object has NxPermissionDimension!"); }			/*else*/ { debug("The object has NO NxPermissionDimension!"); tc.fail(verbose); };
		ifElse (isCreatabilityDimension(v))		{ debug("The object has CreatabilityDimension!"); }			/*else*/ { debug("The object has NO CreatabilityDimension!"); tc.fail(verbose); };
		ifElse (isCreatable(v))					{ debug("The object is Creatable!"); }						/*else*/ { debug("The object is NOT Creatable!"); tc.fail(verbose); };
		ifElse (isNonCreatable(v))				{ debug("The object is NonCreatable!"); tc.fail(verbose); }	/*else*/ { debug("The object is NOT NonCreatable!"); };
		ifElse (isRelativityDimension(v))		{ debug("The object has RelativityDimension!"); }			/*else*/ { debug("The object has NO RelativityDimension!"); tc.fail(verbose); };
		ifElse (isRelative(v))					{ debug("The object is Relative!"); }						/*else*/ { debug("The object is NOT Relative!"); };
		ifElse (isNonRelative(v))				{ debug("The object is NonRelative!"); }					/*else*/ { debug("The object is NOT NonRelative!"); };
		ifElse (isCanonical(v))					{ debug("The object is Canonical!"); }						/*else*/ { debug("The object is NOT Canonical!"); };

		debug("The path is going to be created as a file!");
		val result = v.createAsFile();
		debug("The result of creation is: " + v);

		debug("'" + v + "'");
		ifElse (isPath(v))						{ debug("The object is Path!"); }										/*else*/ { debug("The object is NOT Path!"); tc.fail(verbose); };
		ifElse (isValid(v))						{ debug("The object is Valid!"); }										/*else*/ { debug("The object is NOT Valid!"); tc.fail(verbose); };
		ifElse (isExistencyDimension(v))		{ debug("The object has ExistencyDimension!"); }						/*else*/ { debug("The object has NO ExistencyDimension!"); tc.fail(verbose); };
		ifElse (isExistent(v))					{ debug("The object is Existent!"); }									/*else*/ { debug("The object is NOT Existent!"); tc.fail(verbose); };
		ifElse (isNonExistent(v))				{ debug("The object is NonExistent!"); tc.fail(verbose); }				/*else*/ { debug("The object is NOT NonExistent!"); };
		ifElse (isNxPermissionDimension(v))		{ debug("The object has NxPermissionDimension!"); tc.fail(verbose); }	/*else*/ { debug("The object has NO NxPermissionDimension!"); tc.fail(verbose); };
		ifElse (isCreatabilityDimension(v))		{ debug("The object has CreatabilityDimension!"); tc.fail(verbose); }	/*else*/ { debug("The object has NO CreatabilityDimension!"); tc.fail(verbose); };
		ifElse (isCreatable(v))					{ debug("The object is Creatable!"); tc.fail(verbose); }				/*else*/ { debug("The object is NOT Creatable!"); tc.fail(verbose); };
		ifElse (isNonCreatable(v))				{ debug("The object is NonCreatable!"); tc.fail(verbose); }				/*else*/ { debug("The object is NOT NonCreatable!"); };
		ifElse (isExPermissionDimension(v))		{ debug("The object has ExPermissionDimension!"); }						/*else*/ { debug("The object has NO ExPermissionDimension!"); tc.fail(verbose); };
		ifElse (isExecutabilityDimension(v))	{ debug("The object has ExecutabilityDimension!"); }					/*else*/ { debug("The object has NO ExecutabilityDimension!"); tc.fail(verbose); };
		ifElse (isReadabilityDimension(v))		{ debug("The object has ReadabilityDimension!"); }						/*else*/ { debug("The object has NO ReadabilityDimension!"); tc.fail(verbose); };
		ifElse (isWritabilityDimension(v))		{ debug("The object has WritabilityDimension!"); }						/*else*/ { debug("The object has NO WritabilityDimension!"); tc.fail(verbose); };
		ifElse (isPathTypeDimension(v))			{ debug("The object has PathTypeDimension!"); }							/*else*/ { debug("The object has NO PathTypeDimension!"); tc.fail(verbose); };
		ifElse (isLeaf(v))						{ debug("The object is Leaf!"); }										/*else*/ { debug("The object is NOT Leaf!"); tc.fail(verbose); };
		ifElse (isFile(v))						{ debug("The object is File!"); }										/*else*/ { debug("The object is NOT File!"); tc.fail(verbose); };
		ifElse (isRelativityDimension(v))		{ debug("The object has RelativityDimension!"); }						/*else*/ { debug("The object has NO RelativityDimension!"); tc.fail(verbose); };
		ifElse (isRelative(v))					{ debug("The object is Relative!"); }									/*else*/ { debug("The object is NOT Relative!"); };
		ifElse (isNonRelative(v))				{ debug("The object is NonRelative!"); }								/*else*/ { debug("The object is NOT NonRelative!"); };
	});
	testbed.addTestCase(testcase);

	testbed.runTestCases(verbose);
}
