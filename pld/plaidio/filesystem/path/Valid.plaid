/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SR-1.1.1
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	"Validity" state region of "Path" typestate.
	FILE:	Valid.plaid
**/
package plaidio.filesystem.path;

import plaidio.filesystem.Path;
import plaidio.filesystem.path.valid.Existent;
import plaidio.filesystem.path.valid.NonExistent;

/*------------------------------------------------------------------------------
/**
	CID:	TS-1.1.1.2
	DESC:	"Valid" typestate which contains a valid path.
			The constructor of this typestate should be private.
**/
state Valid case of Path
{
	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-1.1.1.2.1
		DESC:	Checks whether the path exists or not, and
				changes the state of "this" into either "Existent" or "NonExistent".
	**/
	/*public*/ method /*void*/ checkExistency() /*[unique Valid >> unique Existent | unique NonExistent this]*/
	{
		ifElse (file.exists())
		{
			this <- Existent;
		}
		//else
		{
			this <- NonExistent;
		}
	} // method /*void*/ checkExistency()

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-1.1.1.2.2
		DESC:	Returns the absolute pathname string of this abstract pathname.
	**/
	/*public*/ method immutable String getAbsolutePathString()
	{
		/*return*/ file.getAbsolutePath();
	} // method immutable String getAbsolutePathString()

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-1.1.1.2.3
		DESC:	Returns the absolute form of this abstract pathname.
	**/
	/*public*/ method unique Valid getAbsoluteValid()
	{
		val p = new Path { file = java.io.File.new(getAbsolutePathString()); };
		p.validate();
		/*return*/ p;
	} // method unique Valid getAbsoluteValid()

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-1.1.1.2.4
		DESC:	Returns the canonical pathname string of this abstract pathname.
	**/
	/*public*/ method immutable String getCanonicalPathString()
	{
		/*return*/ file.getCanonicalPath();
	} // method immutable String getCanonicalPathString()

	/*-----------------------------------------------------------------------------
	/**
		CID:	ST-1.1.1.2.5
		DESC:	Returns the canonical form of this abstract pathname.
	**/
	/*public*/ method unique Valid getCanonicalValid()
	{
		val p = new Path { file = java.io.File.new(getCanonicalPathString()); };
		p.validate();
		/*return*/ p;
	} // method unique Valid getCanonicalValid()
}