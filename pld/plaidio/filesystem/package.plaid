/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-1
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem is basic statespace for SR-11 features
	FILE:	package.plaid
**/
package plaidio.filesystem;

import plaidio.statecheckers.debugIsPath;
import plaidio.statecheckers.debugIsValid;
import plaidio.statecheckers.debugIsInvalid;

import com.akefirad.plaid.statecheckers.debugIsString;
import com.akefirad.plaid.statecheckers.debugIsCharacter;

import com.akefirad.plaid.testing.debug;
import com.akefirad.plaid.testing.makeTestBed;
import com.akefirad.plaid.testing.makeTestCase;

/*------------------------------------------------------------------------------
/**
	CID: 	ST-11
	DESC:	The system-dependent path-separator character.
**/
method immutable String pathSeparator()
{
	/*return*/ ("" + pathSeparatorChar());
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12
	DESC:	The system-dependent path-separator character.
**/
method immutable Character pathSeparatorChar()
{
	/*return*/ new Character { nativeVal = java.io.File.pathSeparatorChar; };
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-13
	DESC:	The system-dependent default name-separator character.
**/
method immutable String separator()
{
	/*return*/ ("" + separatorChar());
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-14
	DESC:	The system-dependent default name-separator character.
**/
method immutable Character separatorChar()
{
	/*return*/ new Character { nativeVal = java.io.File.separatorChar; };
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-11
	DESC:	constructor for TS-11
**/
method unique Path makePath(immutable String path)
{
	val unique Path p = new Path { j_File = java.io.File.new(path); };
	p.p_InitializePath();
	/*return*/ p;
}

/*------------------------------------------------------------------------------
/**
	CID:	TC-SS-1
	DESC:	Test cases of plaidio.filesystem.validity package's features
**/
method void test_filesystem(immutable Boolean verbose)
{
	val testbed = makeTestBed();
	var testcase = new Unit;
	
	testcase = makeTestCase("TC-ST-11 pathSeparator()", fn(tc) => {
		val immutable String v = pathSeparator();
		debug("'" + v + "'", verbose);
		tc.assert(fn() => { debugIsString(v, verbose); }, verbose);
	});
	testbed.addTestCase(testcase);

//	testcase = makeTestCase("TC-ST-12 pathSeparatorChar()", fn(tc) => {
//		val immutable Character v = pathSeparatorChar();
//		debug("'" + v + "'", verbose);
//		tc.assert(fn() => debugIsCharacter(v, verbose));
//	});
//	testbed.addTestCase(testcase);
//	
//	testcase = makeTestCase("TC-ST-13 separator()", fn(tc) => {
//		val immutable String v = separator();
//		debug("'" + v + "'", verbose);
//		tc.assert(fn() => { debugIsString(v, verbose); });
//	});
//	testbed.addTestCase(testcase);
//	
//	testcase = makeTestCase("TC-ST-14 separatorChar()", fn(tc) => {
//		val immutable Character v = separatorChar();
//		debug("'" + v + "'", verbose);
//		tc.assert(fn() => debugIsCharacter(v, verbose));
//	});
//	testbed.addTestCase(testcase);
//	
//	testcase = makeTestCase("TC-TS-11 make a path", fn(tc) => {
//		val unique Path v = makePath("foo");
//		debug("'" + v + "'", verbose);
//		tc.assert(fn() => debugIsPath(v, verbose));
//	});
//	testbed.addTestCase(testcase);
	
//	testcase = makeTestCase("TC-TS-111 make an invalid path (WINDOWS)", fn(tc) => {
//		ifElse(java.lang.System.getProperty("os.name").contains("Windows"))
//		{
//			val unique Path v = makePath("con");
//			debug("'" + v + "'", verbose);
//			debugIsPath(v, verbose);
//			debugIsInvalid(v, verbose);
//			debugIsValid(v, verbose);
//		}
//		/*else*/
//		{
//			debug("Warning: this test case is not applicable for non-windows OSs.", verbose);
//		}
//	});
//	testbed.addTestCase(testcase);
//
//	testcase = makeTestCase("TC-TS-112 make a valid path", fn(tc) => {
//		val unique Path v = makePath("foo");
//		debug("'" + v + "'", verbose);
//		debugIsPath(v, verbose);
//		debugIsInvalid(v, verbose);
//		debugIsValid(v, verbose);
//	});
//	testbed.addTestCase(testcase);
//
	testbed.runTestCases(verbose);
}
