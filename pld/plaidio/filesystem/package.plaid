/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-12
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package plaidio.filesystem is basic statespace for SR-12 features
	FILE:	package.plaid
**/
package plaidio.filesystem;

import plaidio.filesystem._debuger.debugIsPath;
import plaidio.filesystem.validity._debuger.debugIsValid;
import plaidio.filesystem.validity._debuger.debugIsInvalid;
import plaidio.filesystem.validity.valid._debuger.debugIsD_Existency;
import plaidio.filesystem.validity.valid.existency._debuger.debugIsExistent;
import plaidio.filesystem.validity.valid.existency.existent.pathtype._debuger.debugIsFile;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission._debuger.debugIsD_FileExecutability;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission._debuger.debugIsD_FileReadability;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission._debuger.debugIsD_FileWritability;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission.fileexecutability._debuger.debugIsExecutableFile;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission.filereadability._debuger.debugIsReadableFile;
import plaidio.filesystem.validity.valid.existency.existent.pathtype.filepermission.filewritability._debuger.debugIsWritableFile;

import com.akefirad.plaid.lang._debuger.debugIsInt32;
import com.akefirad.plaid.lang._debuger.debugIsString;
import com.akefirad.plaid.lang._debuger.debugIsCharacter;

import com.akefirad.plaid.testing.makeTestBed;

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12.1
	DESC:	The system-dependent path-separator character.
**/
method immutable String pathSeparator()
{
	/*return*/ ("" + pathSeparatorChar());
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12.2
	DESC:	The system-dependent path-separator character.
**/
method immutable Character pathSeparatorChar()
{
	/*return*/ new Character { nativeVal = java.io.File.pathSeparatorChar; };
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12.3
	DESC:	The system-dependent default name-separator character.
**/
method immutable String separator()
{
	/*return*/ ("" + separatorChar());
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12.4
	DESC:	The system-dependent default name-separator character.
**/
method immutable Character separatorChar()
{
	/*return*/ new Character { nativeVal = java.io.File.separatorChar; };
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12.5
	DESC:	The system-dependent default name-separator character.
**/
method unique Path createTempFile(immutable String prefix, immutable String suffix)
{
	val unique Path p = new Path { var j_File = java.io.File.createTempFile(prefix, suffix); };
	p.p_InitPath();
	/*return*/ p;
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12.6
	DESC:	The system-dependent default name-separator character.
**/
method unique Path createTempFileIn(immutable String prefix, immutable String suffix, pure Folder folder)
{
	match (folder)
	{
		case WritableFolder
		{
			val unique Path p = new Path { var j_File = java.io.File.createTempFile(prefix, suffix, folder.j_File); };
			p.p_InitPath();
			/*return*/ p;
		}
	};
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12.7
	DESC:	constructor for TS-11
**/
method unique Path makePath(immutable String path)
{
	val unique Path p = new Path { var j_File = java.io.File.new(path); };
	p.p_InitPath();
	/*return*/ p;
}

/*------------------------------------------------------------------------------
/**
	CID:	TC-SS-12
	DESC:	Test cases of plaidio.filesystem package's features
**/
method void test_filesystem(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of plaidio.filesystem package's features");

	testbed.makeTestCase("TC-ST-12.1 pathSeparator()", fn(tc) => {
		val immutable String o = pathSeparator();
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsString(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-ST-12.2 pathSeparatorChar()", fn(tc) => {
		val immutable Character o = pathSeparatorChar();
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsCharacter(o, verbose); }, verbose);
	});
	
	testbed.makeTestCase("TC-ST-12.3 separator()", fn(tc) => {
		val immutable String o = separator();
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsString(o, verbose); }, verbose);
	});
	
	testbed.makeTestCase("TC-ST-12.4 separatorChar()", fn(tc) => {
		val immutable Character o = separatorChar();
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsCharacter(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-ST-12.5 createTempFile()", fn(tc) => {
		val unique Path o = createTempFile("foo", "tmp");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileExecutability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileReadability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileWritability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsReadableFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsWritableFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExecutableFile(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-ST-12.6 createTempFileIn()", fn(tc) => {
		val unique Path o = createTempFileIn("foo", "tmp", makePath(""));
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsValid(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_Existency(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExistent(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileExecutability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileReadability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsD_FileWritability(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsReadableFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsWritableFile(o, verbose); }, verbose);
		tc.assert(fn() => { debugIsExecutableFile(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-TS-12.7 make a path", fn(tc) => {
		val unique Path o = makePath("foo");
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsPath(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-ST-13.2 Path.getName()", fn(tc) => {
		val immutable String o = makePath("foo").getName();
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsString(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-ST-13.3 Path.getAddress()", fn(tc) => {
		val immutable String o = makePath("foo").getAddress();
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsString(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-ST-13.4 Path.toString()", fn(tc) => {
		val immutable String o = makePath("foo").toString();
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsString(o, verbose); }, verbose);
	});

	testbed.makeTestCase("TC-ST-13.4 Path.hashCode()", fn(tc) => {
		val immutable String o = makePath("foo").hashCode();
		tc.debug("'" + o + "'", verbose);
		tc.assert(fn() => { debugIsInt32(o, verbose); }, verbose);
	});

	testbed.runTestCases(verbose);
}
