/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-1
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package of plaid.io.filesystem statespace.
	FILE:	package.plaid
**/
package plaidio.filesystem;

import plaidio.statecheckers.isPath;
import plaidio.statecheckers.isValid;
import plaidio.statecheckers.isInvalid;
import com.akefirad.plaid.statecheckers.isString;
import com.akefirad.plaid.statecheckers.isCharacter;
import com.akefirad.plaid.testing.debug;
import com.akefirad.plaid.testing.makeTestBed;
import com.akefirad.plaid.testing.makeTestCase;

/*------------------------------------------------------------------------------
/**
	CID: 	ST-11
	DESC:	The system-dependent path-separator character.
**/
method immutable String pathSeparator()
{
	/*return*/ ("" + pathSeparatorChar());
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12
	DESC:	The system-dependent path-separator character.
**/
method immutable Character pathSeparatorChar()
{
	/*return*/ new Character { nativeVal = java.io.File.pathSeparatorChar; };
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-13
	DESC:	The system-dependent default name-separator character.
**/
method immutable String separator()
{
	/*return*/ ("" + separatorChar());
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-14
	DESC:	The system-dependent default name-separator character.
**/
method immutable Character separatorChar()
{
	/*return*/ new Character { nativeVal = java.io.File.separatorChar; };
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-110
	DESC:	constructor for TS-11
**/
method unique Path makePath(immutable String path)
{
	val unique Path p = new Path { j_File = java.io.File.new(path); };
	p.stabilizePath();
	/*return*/ p;
}

/*------------------------------------------------------------------------------
/**
	DESC:	Test plaidio.filesystem.path package's features
**/
method void test_filesystem(immutable Boolean verbose)
{
	val testbed = makeTestBed();
	var testcase = new Unit;
	
	testcase = makeTestCase("TC-ST-11 pathSeparator()", fn(tc) => {
		val immutable String v = pathSeparator();
		debug("'" + v + "'");
		ifElse (isString(v)) { debug("The object is String!"); } /*else*/ { debug("The object is NOT String!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-ST-12 pathSeparatorChar()", fn(tc) => {
		val immutable Character v = pathSeparatorChar();
		debug("'" + v + "'");
		ifElse (isCharacter(v)) { debug("The object is Character!"); } /*else*/ { debug("The object is NOT Character!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);
	
	testcase = makeTestCase("TC-ST-13 separator()", fn(tc) => {
		val immutable String v = separator();
		debug("'" + v + "'");
		ifElse (isString(v)) { debug("The object is String!"); } /*else*/ { debug("The object is NOT String!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);
	
	testcase = makeTestCase("TC-ST-14 separatorChar()", fn(tc) => {
		val immutable Character v = separatorChar();
		debug("'" + v + "'");
		ifElse (isCharacter(v)) { debug("The object is Character!"); } /*else*/ { debug("The object is NOT Character!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);
	
	testcase = makeTestCase("TC-TS-11 make a path", fn(tc) => {
		val unique Path v = makePath("foo");
		debug("'" + v + "'");
		ifElse (isPath(v)) { debug("The object is Path!"); } /*else*/ { debug("The object is NOT Path!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);
	
	testcase = makeTestCase("TC-TS-111 make an invalid path", fn(tc) => {
		val unique Path v = makePath("con");
		debug("'" + v + "'");
		ifElse (isPath(v)) { debug("The object is Path!"); } /*else*/ { debug("The object is NOT Path!"); tc.fail(); };
		ifElse (isInvalid(v)) { debug("The object is Invalid!"); } /*else*/ { debug("The object is NOT Invalid!"); tc.fail(); };
		ifElse (isValid(v)) { debug("The object is Valid!"); tc.fail(); } /*else*/ { debug("The object is NOT Valid!"); };
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-TS-112 make a valid path", fn(tc) => {
		val unique Path v = makePath("foo");
		debug("'" + v + "'");
		ifElse (isPath(v)) { debug("The object is Path!"); } /*else*/ { debug("The object is not Path!"); tc.fail(); };
		ifElse (isInvalid(v)) { debug("The object is Invalid!"); tc.fail(); } /*else*/ { debug("The object is not Invalid!"); };
		ifElse (isValid(v)) { debug("The object is Valid!"); } /*else*/ { debug("The object is not Valid!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);

	testbed.runTestCases(verbose);
}
