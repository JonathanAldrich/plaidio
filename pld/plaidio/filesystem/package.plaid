/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-1
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Package of plaid.io.filesystem statespace.
	FILE:	package.plaid
**/
package plaidio.filesystem;

import plaidio.filesystem.path.Invalid;
import plaidio.filesystem.path.Valid;

import plaidio.statecheckers.*;
import com.akefirad.plaid.testing.*;
import com.akefirad.plaid.statecheckers.*;

/*------------------------------------------------------------------------------
/**
	CID: 	ST-11
	DESC:	The system-dependent path-separator character.
**/
/*static*/ method immutable String pathSeparator()
{
	/*return*/ ("" + pathSeparatorChar());
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-12
	DESC:	The system-dependent path-separator character.
**/
/*static*/ method immutable Character pathSeparatorChar()
{
	/*return*/ new Character { nativeVal = java.io.File.pathSeparatorChar; };
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-13
	DESC:	The system-dependent default name-separator character.
**/
/*static*/ method immutable String separator()
{
	/*return*/ ("" + separatorChar());
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-14
	DESC:	The system-dependent default name-separator character.
**/
/*static*/ method immutable Character separatorChar()
{
	/*return*/ new Character { nativeVal = java.io.File.separatorChar; };
}

/*------------------------------------------------------------------------------
/**
	CID: 	ST-110
	DESC:	constructor for TS-11
**/
method unique Path makePath(immutable String path)
{
	/*return*/ new Path { j_File = java.io.File.new(path); };
}

/*------------------------------------------------------------------------------
/**
	DESC:	Test plaidio.filesystem.path package's features
**/
method void test_package(immutable Boolean verbose)
{
	val testbed = makeTestBed();
	var testcase = new Unit;
	
	testcase = makeTestCase("TC-ST-11 pathSeparator()", fn(tc) => {
		val immutable String v = pathSeparator();
		printLine("'" + v + "'");
		ifElse (isString(v)) { printLine("The object is String!"); } { printLine("The object is not String!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-ST-12 pathSeparatorChar()", fn(tc) => {
		val immutable Character v = pathSeparatorChar();
		printLine("'" + v + "'");
		ifElse (isCharacter(v)) { printLine("The object is Character!"); } { printLine("The object is not Character!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);
	
	testcase = makeTestCase("TC-ST-13 separator()", fn(tc) => {
		val immutable String v = separator();
		printLine("'" + v + "'");
		ifElse (isString(v)) { printLine("The object is String!"); } { printLine("The object is not String!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);
	
	testcase = makeTestCase("TC-ST-14 separatorChar()", fn(tc) => {
		val immutable Character v = separatorChar();
		printLine("'" + v + "'");
		ifElse (isCharacter(v)) { printLine("The object is Character!"); } { printLine("The object is not Character!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);
	
	testcase = makeTestCase("TC-ST-110 separatorChar()", fn(tc) => {
		val unique Path v = makePath("foo");
		printLine("'" + v + "'");
		ifElse (isPath(v)) { printLine("The object is Path!"); } { printLine("The object is not Path!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);
	

	testcase = makeTestCase("TC-ST-1110 makeInvalidPath()", fn(tc) => {
		val unique Invalid v = makePath("con");
		printLine("'" + v + "'");
		ifElse (isPath(v)) { printLine("The object is Path!"); } { printLine("The object is not Path!"); tc.fail(); };
		ifElse (isInvalid(v)) { printLine("The object is Invalid!"); } { printLine("The object is not Invalid!"); tc.fail(); };
		ifElse (isValid(v)) { printLine("The object is Valid!"); tc.fail(); } { printLine("The object is not Valid!"); };
	});
	testbed.addTestCase(testcase);

	testcase = makeTestCase("TC-ST-1120 makeValidPath()", fn(tc) => {
		val unique Valid v = makePath("foo");
		printLine("'" + v + "'");
		ifElse (isPath(v)) { printLine("The object is Path!"); } { printLine("The object is not Path!"); tc.fail(); };
		ifElse (isInvalid(v)) { printLine("The object is Invalid!"); tc.fail(); } { printLine("The object is not Invalid!"); };
		ifElse (isValid(v)) { printLine("The object is Valid!"); } { printLine("The object is not Valid!"); tc.fail(); };
	});
	testbed.addTestCase(testcase);


	testbed.runTestCases(verbose);
}
