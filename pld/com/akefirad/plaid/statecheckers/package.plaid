package com.akefirad.plaid.statecheckers;

method immutable Boolean isString(v) { match (v) { case String { true; } default { false; } }; }

// plaid.collection 2762:b17367e99a32@default
method immutable Boolean isAANode(v) { match (v) { case AANode { true; } default { false; } }; }
method immutable Boolean isAATree(v) { match (v) { case AATree { true; } default { false; } }; }
method immutable Boolean isArray(v) { match (v) { case Array { true; } default { false; } }; }
method immutable Boolean isCollection(v) { match (v) { case Collection { true; } default { false; } }; }
method immutable Boolean isEndOfListNode(v) { match (v) { case EndOfListNode { true; } default { false; } }; }
method immutable Boolean isHashProvider(v) { match (v) { case HashProvider { true; } default { false; } }; }
method immutable Boolean isLinkedList(v) { match (v) { case LinkedList { true; } default { false; } }; }
method immutable Boolean isListNode(v) { match (v) { case ListNode { true; } default { false; } }; }
method immutable Boolean isListValueNode(v) { match (v) { case ListValueNode { true; } default { false; } }; }
method immutable Boolean isMap(v) { match (v) { case Map { true; } default { false; } }; }
method immutable Boolean isMapWithDefault(v) { match (v) { case MapWithDefault { true; } default { false; } }; }
method immutable Boolean isMutableCollection(v) { match (v) { case MutableCollection { true; } default { false; } }; }
method immutable Boolean isMutableMap(v) { match (v) { case MutableMap { true; } default { false; } }; }
method immutable Boolean isSet(v) { match (v) { case Set { true; } default { false; } }; }
method immutable Boolean isTreeMap(v) { match (v) { case TreeMap { true; } default { false; } }; }
method immutable Boolean isTreeSet(v) { match (v) { case TreeSet { true; } default { false; } }; }

// plaid.lang 2762:b17367e99a32@default
method immutable Boolean isBoolean(v) { match (v) { case Boolean { true; } default { false; } }; }
method immutable Boolean isCharacter(v) { match (v) { case Character { true; } default { false; } }; }
method immutable Boolean isComparable(v) { match (v) { case Comparable { true; } default { false; } }; }
method immutable Boolean isCons(v) { match (v) { case Cons { true; } default { false; } }; }
method immutable Boolean isDecimal(v) { match (v) { case Decimal { true; } default { false; } }; }
method immutable Boolean isFalse(v) { match (v) { case False { true; } default { false; } }; }
method immutable Boolean isFloat32(v) { match (v) { case Float32 { true; } default { false; } }; }
method immutable Boolean isFloat64(v) { match (v) { case Float64 { true; } default { false; } }; }
method immutable Boolean isHashable(v) { match (v) { case Hashable { true; } default { false; } }; }
method immutable Boolean isInt16(v) { match (v) { case Int16 { true; } default { false; } }; }
method immutable Boolean isInt32(v) { match (v) { case Int32 { true; } default { false; } }; }
method immutable Boolean isInt64(v) { match (v) { case Int64 { true; } default { false; } }; }
method immutable Boolean isInt8(v) { match (v) { case Int8 { true; } default { false; } }; }
method immutable Boolean isInteger(v) { match (v) { case Integer { true; } default { false; } }; }
method immutable Boolean isList(v) { match (v) { case List { true; } default { false; } }; }
method immutable Boolean isListCell(v) { match (v) { case ListCell { true; } default { false; } }; }
method immutable Boolean isNativeNumber(v) { match (v) { case NativeNumber { true; } default { false; } }; }
method immutable Boolean isNil(v) { match (v) { case Nil { true; } default { false; } }; }
method immutable Boolean isNone(v) { match (v) { case None { true; } default { false; } }; }
method immutable Boolean isNumber(v) { match (v) { case Number { true; } default { false; } }; }
method immutable Boolean isOption(v) { match (v) { case Option { true; } default { false; } }; }
method immutable Boolean isOrdEqual(v) { match (v) { case OrdEqual { true; } default { false; } }; }
method immutable Boolean isOrderable(v) { match (v) { case Orderable { true; } default { false; } }; }
method immutable Boolean isOrdering(v) { match (v) { case Ordering { true; } default { false; } }; }
method immutable Boolean isOrderProvider(v) { match (v) { case OrderProvider { true; } default { false; } }; }
method immutable Boolean isOrdGreaterThan(v) { match (v) { case OrdGreaterThan { true; } default { false; } }; }
method immutable Boolean isOrdLessThan(v) { match (v) { case OrdLessThan { true; } default { false; } }; }
method immutable Boolean isPair(v) { match (v) { case Pair { true; } default { false; } }; }
method immutable Boolean isPrintable(v) { match (v) { case Printable { true; } default { false; } }; }
method immutable Boolean isRational(v) { match (v) { case Rational { true; } default { false; } }; }
method immutable Boolean isSome(v) { match (v) { case Some { true; } default { false; } }; }
method immutable Boolean isStack(v) { match (v) { case Stack { true; } default { false; } }; }
method immutable Boolean isTrue(v) { match (v) { case True { true; } default { false; } }; }
method immutable Boolean isWhile(v) { match (v) { case While { true; } default { false; } }; }
