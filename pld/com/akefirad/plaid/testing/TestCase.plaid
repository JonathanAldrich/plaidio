/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-9
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Testing package of plaid programming language.
	FILE:	TestCase.plaid
**/
package com.akefirad.plaid.testing;

//------------------------------------------------------------------------------
/**
	CID:	TS-91
	DESC:	Test Case for plaidio package's testing (created based on Test)
**/
immutable state TestCase
{
	var immutable Boolean p_Result = true;
	val immutable String p_Name;
	val p_Body;
	
	//-----------------------------------------------------------------------------
	/**
		CID:	ST-911
		DESC:	Runs the test case and return the test result.
				It should be implemented when a tset case is creating.
	**/
    method immutable Boolean run(immutable Boolean verbose)
    {
		ifElse (verbose)
		{
			printLine(">>> BEGIN ------------------------------------");
			printLine("--- NAME: " + p_Name);
			p_Body(this);
			printLine("--- RESULT: " + ifElse (p_Result) { "PASSED"; } { "FAILED"; });
			printLine(">>> END --------------------------------------");
		}
		//Else
		{
			p_Body(this);
			printLine("TESTCASE " + ifElse (p_Result) { "PASSED"; } { "FAILED"; } + " " + p_Name);
		}
    }

	//-----------------------------------------------------------------------------
	/**
		CID:	ST-912
		DESC:	Gets a function and asserts its result in this test case.
	**/
	method void assert(() -> immutable Boolean assertion, verbose)
	{
		if (assertion() == false) { fail(verbose); };
	}

	//-----------------------------------------------------------------------------
	/**
		CID:	ST-913
		DESC:	Makes the test case failed.
	**/
	method void fail(immutable Boolean verbose)
	{
		p_Result = false;
		if (verbose) { printLine("FAILED..."); };
	}
}