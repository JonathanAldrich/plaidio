/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	SS-0.0
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Main package of plaid programming language.
	FILE:	package.plaid
**/
package com.akefirad.plaid.lang;

import com.akefirad.plaid.lang.collections.Array;
import com.akefirad.plaid.lang.collections.BoundInteger;
import com.akefirad.plaid.lang.collections.InBoundInteger;

import com.akefirad.plaid.testing.makeTestBed;

import com.akefirad.plaid.lang.statecheckers.*;

method trycatch(tryBlock, catchBlock, immutable String exception)
{
	com.akefirad.plaid.JavaHelper.runMethodInTryBlock(tryBlock, catchBlock, exception);
}

method unique Array makeByteArray(immutable Int32 size)
{
    /*return*/ new Array { val j_Array = com.akefirad.plaid.JavaArray.new(java.lang.Byte.MIN_VALUE, size); };
}

method void test_lang(immutable Boolean verbose)
{
	val testbed = makeTestBed("Test cases of com.akefirad.plaid.lang package's features");

	testbed.makeTestCase("makeByteArray() (a zero-length array))", fn(tc) => {
		val o = makeByteArray(0);

		tc.debug("Array Length: " + o.length(), verbose);
		var unique InBoundInteger i = o.createIndexer();
		tc.debug("Array Indexer: " + i.get(), verbose);
		tc.assert(fn() => { debugIsBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsInBoundInteger(i, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsOutBoundInteger(i, verbose); }, verbose);
	});

	testbed.makeTestCase("makeByteArray()", fn(tc) => {
		val o = makeByteArray(5);

		tc.debug("Array Length: " + o.length(), verbose);
		var unique InBoundInteger i = o.createIndexer();
		tc.debug("Array Indexer: " + i.get(), verbose);
		tc.assert(fn() => { debugIsBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsInBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsOutBoundInteger(i, verbose) == false; }, verbose);

		while
		{
			isInBoundInteger(i);
		}
		/*do*/
		{
			o.set(i, com.akefirad.plaid.JavaHelper.castBigIntegerToByte(i.get()));
			i.increaseOne();
		};

		i.set(0);
		tc.debug("Array Indexer: " + i.get(), verbose);
		tc.assert(fn() => { debugIsBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsInBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsOutBoundInteger(i, verbose) == false; }, verbose);
		while
		{
			isInBoundInteger(i);
		}
		/*do*/
		{
			tc.debug("'" + o.get(i) + "'", verbose);
			i.increaseOne();
		};

		tc.debug("Array Indexer: " + i.get(), verbose);
		tc.assert(fn() => { debugIsBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsInBoundInteger(i, verbose) == false; }, verbose);
		tc.assert(fn() => { debugIsOutBoundInteger(i, verbose); }, verbose);

		i.set(2);
		tc.debug("Array Offset: " + i.get(), verbose);
		tc.assert(fn() => { debugIsBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsInBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsOutBoundInteger(i, verbose) == false; }, verbose);
		tc.debug("Array Offset Remaining Count: " + i.countRemainingSteps(), verbose);
		i.setRemainingSteps(2);
		tc.debug("Array Offset Remaining Count After Seting Steps: " + i.countRemainingSteps(), verbose);
		tc.assert(fn() => { debugIsBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsInBoundInteger(i, verbose); }, verbose);
		tc.assert(fn() => { debugIsOutBoundInteger(i, verbose) == false; }, verbose);

		while
		{
			isInBoundInteger(i);
		}
		/*do*/
		{
			tc.debug("'" + o.get(i) + "'", verbose);
			i.increaseOne();
		};

	});

	testbed.runTestCases(verbose);
}

