/**
 *  Copyright (c) 2012 The PLAIDIO project
 * 
 *  This file is part of PLAIDIO, I/O Library for Plaid Language.
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language. If not, see <www.gnu.org/licenses>.
 */

/*------------------------------------------------------------------------------
/**
	CID:	TC-SS-1
	AUTHOR: Rad Akefirad akefirad@gmail.com
	DESC:	Test cases of plaid.io.filesystem package.
	FILE:	package.plaid
**/
package rad.io.filesystem.tc;

import rad.io.filesystem.*;
import rad.io.filesystem.path.validity.*;

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1
	DESC:	Test case for ST-1.1
**/
method TC_ST_1_1()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1:");
	val unique String s = pathSeparator();
    printLine("Value: " + s);
	match (s)
	{
		case String { printLine("Typestate: String"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.2
	DESC:	Test case for ST-1.2
**/
method TC_ST_1_2()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.2:");
	val unique Character c = pathSeparatorChar();
    printLine("Value: " + c);
	match (c)
	{
		case Character { printLine("Typestate: Character"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.3
	DESC:	Test case for ST-1.3
**/
method TC_ST_1_3()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.3:");
	val unique String s = separator();
    printLine("Value: " + s);
	match (s)
	{
		case String { printLine("Typestate: String"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.4
	DESC:	Test case for ST-1.4
**/
method TC_ST_1_4()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.4:");
	val unique Character c = separatorChar();
    printLine("Value: " + c);
	match (c)
	{
		case Character { printLine("Typestate: Character"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1.0
	DESC:	Test case for ST-1.1.0
**/
method TC_ST_1_1_0()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.0:");
	val unique Path p = makePath("foo");
	printLine("Value: " + p);
	match (p)
	{
		case Path { printLine("Typestate: Path"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1.1
	DESC:	Test case for ST-1.1.1
**/
method TC_ST_1_1_1()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.1:");
	val immutable String s = makePath("foo").getName();
	printLine("Value: " + s);
	match (s)
	{
		case String { printLine("Typestate: String"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1.2
	DESC:	Test case for ST-1.1.2
**/
method TC_ST_1_1_2()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.2:");
	val immutable String s = makePath("foo").getPath();
	printLine("Value: " + s);
	match (s)
	{
		case String { printLine("Typestate: String"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1.3
	DESC:	Test case for ST-1.1.3
**/
method TC_ST_1_1_3()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.3:");
	val immutable String s = makePath("foo").toString();
	printLine("Value: " + s);
	match (s)
	{
		case String { printLine("Typestate: String"); }
	};
    printLine("Successful!");
}

/*------------------------------------------------------------------------------
/**
	CID: 	TC-ST-1.1.4
	DESC:	Test case for ST-1.1.4
**/
method TC_ST_1_1_4()
{
    printLine("--------------------------------------------------------------------------------");
    printLine("Test Case ST-1.1.4:");
	val unique Path p = makePath("foo");
	printLine("Path: " + p.getName());
	p.validate();
	printLine("Value: " + p);
	match (p)
	{
		case Valid { printLine("Typestate: Valid"); }
		case Invalid { printLine("Typestate: Invalid"); }
	};
    printLine("Successful!");
}
